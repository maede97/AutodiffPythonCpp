#include "sphere_capsule.h"
#include <cmath>

using namespace std;

namespace CodeGen_SphereCapsule {

double dDdP_0(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = 1.0/(pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp5, 2));
  double tmp7 = exp(5.0*tmp6*(tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5)));
  double tmp8 = 1.0/(12.182493960703473*tmp7 + 1.0);
  double tmp9 = P0 + tmp0 - tmp1*tmp8;
  double tmp10 = P1 + tmp2 - tmp3*tmp8;
  double tmp11 = P2 + tmp4 - tmp5*tmp8;
  double tmp12 = tmp6*tmp7*(P3 - P6)/pow(tmp7 + 0.0820849986238988, 2);
  double tmp13 = 0.41042499311949399*tmp12;
  double r = (tmp10*tmp13*tmp3 + tmp11*tmp13*tmp5 + (1.0/2.0)*tmp9*(0.82084998623898797*tmp1*tmp12 + 2))/sqrt(pow(tmp10, 2) + pow(tmp11, 2) + pow(tmp9, 2));
  return r;
}
double dDdP_1(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = 1.0/(pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp5, 2));
  double tmp7 = exp(5.0*tmp6*(tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5)));
  double tmp8 = 1.0/(12.182493960703473*tmp7 + 1.0);
  double tmp9 = P0 + tmp0 - tmp1*tmp8;
  double tmp10 = P1 + tmp2 - tmp3*tmp8;
  double tmp11 = P2 + tmp4 - tmp5*tmp8;
  double tmp12 = tmp6*tmp7*(P4 - P7)/pow(tmp7 + 0.0820849986238988, 2);
  double tmp13 = 0.41042499311949399*tmp12;
  double r = (tmp1*tmp13*tmp9 + (1.0/2.0)*tmp10*(0.82084998623898797*tmp12*tmp3 + 2) + tmp11*tmp13*tmp5)/sqrt(pow(tmp10, 2) + pow(tmp11, 2) + pow(tmp9, 2));
  return r;
}
double dDdP_2(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = 1.0/(pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp5, 2));
  double tmp7 = exp(5.0*tmp6*(tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5)));
  double tmp8 = 1.0/(12.182493960703473*tmp7 + 1.0);
  double tmp9 = P0 + tmp0 - tmp1*tmp8;
  double tmp10 = P1 + tmp2 - tmp3*tmp8;
  double tmp11 = P2 + tmp4 - tmp5*tmp8;
  double tmp12 = tmp6*tmp7*(P5 - P8)/pow(tmp7 + 0.0820849986238988, 2);
  double tmp13 = 0.41042499311949399*tmp12;
  double r = (tmp1*tmp13*tmp9 + tmp10*tmp13*tmp3 + (1.0/2.0)*tmp11*(0.82084998623898797*tmp12*tmp5 + 2))/sqrt(pow(tmp10, 2) + pow(tmp11, 2) + pow(tmp9, 2));
  return r;
}
double dDdP_3(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp5, 2);
  double tmp8 = 5.0/tmp7;
  double tmp9 = exp(tmp6*tmp8);
  double tmp10 = 1.0/(12.182493960703473*tmp9 + 1.0);
  double tmp11 = 1.0*tmp10;
  double tmp12 = P0 + tmp0 - tmp1*tmp11;
  double tmp13 = P1 - tmp11*tmp3 + tmp2;
  double tmp14 = P2 - tmp11*tmp5 + tmp4;
  double tmp15 = -2*P3;
  double tmp16 = tmp9*(5.0*tmp6*(2*P6 + tmp15)/pow(tmp7, 2) + tmp8*(P0 + P6 + tmp15))/pow(tmp9 + 0.0820849986238988, 2);
  double tmp17 = 0.082084998623898786*tmp16;
  double r = ((1.0/2.0)*tmp12*(0.16416999724779757*tmp1*tmp16 + 2.0*tmp10 - 2) + tmp13*tmp17*tmp3 + tmp14*tmp17*tmp5)/sqrt(pow(tmp12, 2) + pow(tmp13, 2) + pow(tmp14, 2));
  return r;
}
double dDdP_4(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp5, 2);
  double tmp8 = 5.0/tmp7;
  double tmp9 = exp(tmp6*tmp8);
  double tmp10 = 1.0/(12.182493960703473*tmp9 + 1.0);
  double tmp11 = 1.0*tmp10;
  double tmp12 = P0 + tmp0 - tmp1*tmp11;
  double tmp13 = P1 - tmp11*tmp3 + tmp2;
  double tmp14 = P2 - tmp11*tmp5 + tmp4;
  double tmp15 = -2*P4;
  double tmp16 = tmp9*(5.0*tmp6*(2*P7 + tmp15)/pow(tmp7, 2) + tmp8*(P1 + P7 + tmp15))/pow(tmp9 + 0.0820849986238988, 2);
  double tmp17 = 0.082084998623898786*tmp16;
  double r = (tmp1*tmp12*tmp17 + (1.0/2.0)*tmp13*(2.0*tmp10 + 0.16416999724779757*tmp16*tmp3 - 2) + tmp14*tmp17*tmp5)/sqrt(pow(tmp12, 2) + pow(tmp13, 2) + pow(tmp14, 2));
  return r;
}
double dDdP_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp5, 2);
  double tmp8 = 5.0/tmp7;
  double tmp9 = exp(tmp6*tmp8);
  double tmp10 = 1.0/(12.182493960703473*tmp9 + 1.0);
  double tmp11 = 1.0*tmp10;
  double tmp12 = P0 + tmp0 - tmp1*tmp11;
  double tmp13 = P1 - tmp11*tmp3 + tmp2;
  double tmp14 = P2 - tmp11*tmp5 + tmp4;
  double tmp15 = -2*P5;
  double tmp16 = tmp9*(5.0*tmp6*(2*P8 + tmp15)/pow(tmp7, 2) + tmp8*(P2 + P8 + tmp15))/pow(tmp9 + 0.0820849986238988, 2);
  double tmp17 = 0.082084998623898786*tmp16;
  double r = (tmp1*tmp12*tmp17 + tmp13*tmp17*tmp3 + (1.0/2.0)*tmp14*(2.0*tmp10 + 0.16416999724779757*tmp16*tmp5 - 2))/sqrt(pow(tmp12, 2) + pow(tmp13, 2) + pow(tmp14, 2));
  return r;
}
double dDdP_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp1, 2) + pow(tmp4, 2) + pow(tmp6, 2);
  double tmp9 = 5.0/tmp8;
  double tmp10 = exp(tmp7*tmp9);
  double tmp11 = 1.0/(12.182493960703473*tmp10 + 1.0);
  double tmp12 = 1.0*tmp11;
  double tmp13 = P0 + tmp0 - tmp1*tmp12;
  double tmp14 = P1 - tmp12*tmp4 + tmp3;
  double tmp15 = P2 - tmp12*tmp6 + tmp5;
  double tmp16 = tmp10*(tmp2*tmp9 + 5.0*tmp7*(2*P3 - 2*P6)/pow(tmp8, 2))/pow(tmp10 + 0.0820849986238988, 2);
  double tmp17 = 0.082084998623898786*tmp16;
  double r = ((1.0/2.0)*tmp13*(0.16416999724779757*tmp1*tmp16 - 2.0*tmp11) + tmp14*tmp17*tmp4 + tmp15*tmp17*tmp6)/sqrt(pow(tmp13, 2) + pow(tmp14, 2) + pow(tmp15, 2));
  return r;
}
double dDdP_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp1, 2) + pow(tmp4, 2) + pow(tmp6, 2);
  double tmp9 = 5.0/tmp8;
  double tmp10 = exp(tmp7*tmp9);
  double tmp11 = 1.0/(12.182493960703473*tmp10 + 1.0);
  double tmp12 = 1.0*tmp11;
  double tmp13 = P0 + tmp0 - tmp1*tmp12;
  double tmp14 = P1 - tmp12*tmp4 + tmp3;
  double tmp15 = P2 - tmp12*tmp6 + tmp5;
  double tmp16 = tmp10*(tmp2*tmp9 + 5.0*tmp7*(2*P4 - 2*P7)/pow(tmp8, 2))/pow(tmp10 + 0.0820849986238988, 2);
  double tmp17 = 0.082084998623898786*tmp16;
  double r = (tmp1*tmp13*tmp17 + (1.0/2.0)*tmp14*(-2.0*tmp11 + 0.16416999724779757*tmp16*tmp4) + tmp15*tmp17*tmp6)/sqrt(pow(tmp13, 2) + pow(tmp14, 2) + pow(tmp15, 2));
  return r;
}
double dDdP_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp1, 2) + pow(tmp3, 2) + pow(tmp6, 2);
  double tmp9 = 5.0/tmp8;
  double tmp10 = exp(tmp7*tmp9);
  double tmp11 = 1.0/(12.182493960703473*tmp10 + 1.0);
  double tmp12 = 1.0*tmp11;
  double tmp13 = P0 + tmp0 - tmp1*tmp12;
  double tmp14 = P1 - tmp12*tmp3 + tmp2;
  double tmp15 = P2 - tmp12*tmp6 + tmp5;
  double tmp16 = tmp10*(tmp4*tmp9 + 5.0*tmp7*(2*P5 - 2*P8)/pow(tmp8, 2))/pow(tmp10 + 0.0820849986238988, 2);
  double tmp17 = 0.082084998623898786*tmp16;
  double r = (tmp1*tmp13*tmp17 + tmp14*tmp17*tmp3 + (1.0/2.0)*tmp15*(-2.0*tmp11 + 0.16416999724779757*tmp16*tmp6))/sqrt(pow(tmp13, 2) + pow(tmp14, 2) + pow(tmp15, 2));
  return r;
}

double d2DdP2_0_0(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = pow(tmp3, 2);
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp6, 2);
  double tmp8 = pow(tmp1, 2) + tmp4 + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = tmp9*(tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp6*(-P2 + P5));
  double tmp11 = exp(5.0*tmp10);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = P0 + tmp0 - tmp1*tmp12;
  double tmp14 = P1 - tmp12*tmp3 + tmp2;
  double tmp15 = P2 - tmp12*tmp6 + tmp5;
  double tmp16 = pow(tmp13, 2) + pow(tmp14, 2) + pow(tmp15, 2);
  double tmp17 = tmp14*tmp3;
  double tmp18 = P3 - P6;
  double tmp19 = tmp11 + 0.0820849986238988;
  double tmp20 = tmp11/pow(tmp19, 2);
  double tmp21 = 0.41042499311949399*tmp18*tmp20*tmp9;
  double tmp22 = tmp17*tmp21;
  double tmp23 = tmp15*tmp6;
  double tmp24 = tmp21*tmp23;
  double tmp25 = tmp1*tmp20;
  double tmp26 = tmp18*tmp25*tmp9;
  double tmp27 = (1.0/2.0)*tmp13*(0.82084998623898797*tmp26 + 2);
  double tmp28 = pow(tmp18, 2)/pow(tmp8, 2);
  double tmp29 = tmp28*exp(10.0*tmp10);
  double tmp30 = 0.1684486749771367*tmp29/pow(tmp19, 4);
  double tmp31 = 4.1042499311949401*tmp29/pow(tmp19, 3);
  double tmp32 = 2.05212496559747*tmp28;
  double tmp33 = tmp20*tmp32;
  double r = (tmp13*(-tmp1*tmp31 + tmp25*tmp32) - tmp17*tmp31 + tmp17*tmp33 - tmp23*tmp31 + tmp23*tmp33 + tmp30*tmp4 + tmp30*tmp7 + pow(0.41042499311949399*tmp26 + 1, 2))/sqrt(tmp16) + (-tmp22 - tmp24 - tmp27)*(tmp22 + tmp24 + tmp27)/pow(tmp16, 3.0/2.0);
  return r;
}
double d2DdP2_0_1(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = pow(tmp5, 2);
  double tmp7 = pow(tmp1, 2) + pow(tmp3, 2) + tmp6;
  double tmp8 = 1.0/tmp7;
  double tmp9 = tmp8*(tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5));
  double tmp10 = exp(5.0*tmp9);
  double tmp11 = 1.0/(12.182493960703473*tmp10 + 1.0);
  double tmp12 = P0 + tmp0 - tmp1*tmp11;
  double tmp13 = P1 - tmp11*tmp3 + tmp2;
  double tmp14 = P2 - tmp11*tmp5 + tmp4;
  double tmp15 = pow(tmp12, 2) + pow(tmp13, 2) + pow(tmp14, 2);
  double tmp16 = P4 - P7;
  double tmp17 = tmp10 + 0.0820849986238988;
  double tmp18 = pow(tmp17, -2);
  double tmp19 = tmp10*tmp18*tmp8;
  double tmp20 = 0.41042499311949399*tmp19;
  double tmp21 = tmp16*tmp20;
  double tmp22 = tmp1*tmp21;
  double tmp23 = tmp14*tmp5;
  double tmp24 = tmp16*tmp3;
  double tmp25 = 0.82084998623898797*tmp19;
  double tmp26 = P3 - P6;
  double tmp27 = tmp20*tmp26;
  double tmp28 = tmp27*tmp3;
  double tmp29 = tmp1*tmp26;
  double tmp30 = exp(10.0*tmp9);
  double tmp31 = pow(tmp7, -2);
  double tmp32 = tmp16*tmp31;
  double tmp33 = tmp26*tmp32;
  double tmp34 = 4.1042499311949401*tmp30/pow(tmp17, 3);
  double tmp35 = tmp13*tmp24*tmp26*tmp31;
  double tmp36 = 2.05212496559747*tmp10*tmp18;
  double tmp37 = tmp23*tmp33;
  double tmp38 = tmp29*tmp32;
  double r = (tmp12*(-tmp34*tmp38 + tmp36*tmp38) + tmp22*(tmp20*tmp29 + 1) + tmp28*(tmp20*tmp24 + 1) - tmp34*tmp35 - tmp34*tmp37 + tmp35*tmp36 + tmp36*tmp37 + 0.1684486749771367*tmp30*tmp33*tmp6/pow(tmp17, 4))/sqrt(tmp15) + (-tmp12*tmp22 - 1.0/2.0*tmp13*(tmp24*tmp25 + 2) - tmp21*tmp23)*((1.0/2.0)*tmp12*(tmp25*tmp29 + 2) + tmp13*tmp28 + tmp23*tmp27)/pow(tmp15, 3.0/2.0);
  return r;
}
double d2DdP2_0_2(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = pow(tmp3, 2);
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp1, 2) + tmp4 + pow(tmp6, 2);
  double tmp8 = 1.0/tmp7;
  double tmp9 = tmp8*(tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp6*(-P2 + P5));
  double tmp10 = exp(5.0*tmp9);
  double tmp11 = 1.0/(12.182493960703473*tmp10 + 1.0);
  double tmp12 = P0 + tmp0 - tmp1*tmp11;
  double tmp13 = P1 - tmp11*tmp3 + tmp2;
  double tmp14 = P2 - tmp11*tmp6 + tmp5;
  double tmp15 = pow(tmp12, 2) + pow(tmp13, 2) + pow(tmp14, 2);
  double tmp16 = P5 - P8;
  double tmp17 = tmp10 + 0.0820849986238988;
  double tmp18 = pow(tmp17, -2);
  double tmp19 = tmp10*tmp18*tmp8;
  double tmp20 = 0.41042499311949399*tmp19;
  double tmp21 = tmp16*tmp20;
  double tmp22 = tmp1*tmp21;
  double tmp23 = tmp13*tmp3;
  double tmp24 = tmp16*tmp6;
  double tmp25 = 0.82084998623898797*tmp19;
  double tmp26 = P3 - P6;
  double tmp27 = tmp20*tmp26;
  double tmp28 = tmp27*tmp6;
  double tmp29 = tmp1*tmp26;
  double tmp30 = exp(10.0*tmp9);
  double tmp31 = pow(tmp7, -2);
  double tmp32 = tmp16*tmp31;
  double tmp33 = tmp26*tmp32;
  double tmp34 = 4.1042499311949401*tmp30/pow(tmp17, 3);
  double tmp35 = tmp23*tmp33;
  double tmp36 = 2.05212496559747*tmp10*tmp18;
  double tmp37 = tmp14*tmp24*tmp26*tmp31;
  double tmp38 = tmp29*tmp32;
  double r = (tmp12*(-tmp34*tmp38 + tmp36*tmp38) + tmp22*(tmp20*tmp29 + 1) + tmp28*(tmp20*tmp24 + 1) - tmp34*tmp35 - tmp34*tmp37 + tmp35*tmp36 + tmp36*tmp37 + 0.1684486749771367*tmp30*tmp33*tmp4/pow(tmp17, 4))/sqrt(tmp15) + (-tmp12*tmp22 - 1.0/2.0*tmp14*(tmp24*tmp25 + 2) - tmp21*tmp23)*((1.0/2.0)*tmp12*(tmp25*tmp29 + 2) + tmp14*tmp28 + tmp23*tmp27)/pow(tmp15, 3.0/2.0);
  return r;
}
double d2DdP2_0_3(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp3, 2);
  double tmp8 = pow(tmp5, 2);
  double tmp9 = pow(tmp1, 2) + tmp7 + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp6);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp5 + tmp4;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = P3 - P6;
  double tmp20 = tmp12 + 0.0820849986238988;
  double tmp21 = tmp12/pow(tmp20, 2);
  double tmp22 = 0.41042499311949399*tmp10;
  double tmp23 = tmp21*tmp22;
  double tmp24 = tmp19*tmp23;
  double tmp25 = tmp16*tmp3;
  double tmp26 = tmp17*tmp5;
  double tmp27 = tmp1*tmp21;
  double tmp28 = tmp10*tmp19;
  double tmp29 = 0.82084998623898797*tmp28;
  double tmp30 = (1.0/2.0)*tmp15;
  double tmp31 = -2*P3;
  double tmp32 = (2*P6 + tmp31)/pow(tmp9, 2);
  double tmp33 = tmp11*(P0 + P6 + tmp31) + 5.0*tmp32*tmp6;
  double tmp34 = tmp25*tmp33;
  double tmp35 = 0.082084998623898786*tmp21;
  double tmp36 = tmp26*tmp33;
  double tmp37 = tmp1*tmp33;
  double tmp38 = tmp21*tmp37;
  double tmp39 = 0.41042499311949399*tmp19*tmp32;
  double tmp40 = tmp21*tmp39;
  double tmp41 = exp(10.0*tmp10*tmp6);
  double tmp42 = 0.03368973499542733*tmp28*tmp33*tmp41/pow(tmp20, 4);
  double tmp43 = tmp29*tmp41/pow(tmp20, 3);
  double tmp44 = tmp1*tmp23;
  double r = (tmp15*(tmp19*tmp22*tmp38 - tmp24 + tmp27*tmp39 - tmp37*tmp43 + tmp44) + tmp23*tmp25 + tmp23*tmp26 + tmp24*tmp34 + tmp24*tmp36 + tmp25*tmp40 + tmp26*tmp40 - tmp34*tmp43 - tmp36*tmp43 + tmp42*tmp7 + tmp42*tmp8 + (tmp19*tmp44 + 1)*(tmp14 + 0.082084998623898786*tmp38 - 1))/sqrt(tmp18) + (tmp24*tmp25 + tmp24*tmp26 + tmp30*(tmp27*tmp29 + 2))*(-tmp30*(2.0*tmp13 + 0.16416999724779757*tmp38 - 2) - tmp34*tmp35 - tmp35*tmp36)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_0_4(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp5, 2);
  double tmp8 = pow(tmp1, 2) + pow(tmp3, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = tmp11 + 0.0820849986238988;
  double tmp19 = tmp11/pow(tmp18, 2);
  double tmp20 = P3 - P6;
  double tmp21 = tmp20*tmp9;
  double tmp22 = 0.41042499311949399*tmp21;
  double tmp23 = tmp19*tmp22;
  double tmp24 = tmp15*tmp23;
  double tmp25 = tmp16*tmp5;
  double tmp26 = tmp23*tmp25;
  double tmp27 = tmp1*tmp19;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = -2*P4;
  double tmp30 = (2*P7 + tmp29)/pow(tmp8, 2);
  double tmp31 = tmp10*(P1 + P7 + tmp29) + 5.0*tmp30*tmp6;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp27*tmp32;
  double tmp34 = tmp19*tmp25;
  double tmp35 = tmp3*tmp31;
  double tmp36 = tmp19*tmp35;
  double tmp37 = 0.41042499311949399*tmp20*tmp30;
  double tmp38 = exp(10.0*tmp6*tmp9);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp28/pow(tmp18, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp22*tmp27;
  double r = (tmp14*(-tmp1*tmp41 + tmp27*tmp37 + tmp31*tmp42) + tmp15*tmp19*tmp3*tmp37 + tmp15*tmp22*tmp36 - tmp15*tmp35*tmp38*tmp40 + tmp23*tmp3*(tmp13 + 0.082084998623898786*tmp36 - 1) - tmp24 - tmp25*tmp41 + tmp26*tmp31 + tmp33*(tmp42 + 1) + tmp34*tmp37 + 0.03368973499542733*tmp21*tmp39*tmp7/pow(tmp18, 4))/sqrt(tmp17) + (-tmp14*tmp33 - 1.0/2.0*tmp15*(2.0*tmp12 + 0.16416999724779757*tmp36 - 2) - tmp32*tmp34)*((1.0/2.0)*tmp14*(tmp27*tmp28 + 2) + tmp24*tmp3 + tmp26)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_0_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp3, 2);
  double tmp8 = pow(tmp1, 2) + pow(tmp5, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = tmp11 + 0.0820849986238988;
  double tmp19 = tmp11/pow(tmp18, 2);
  double tmp20 = P3 - P6;
  double tmp21 = tmp20*tmp9;
  double tmp22 = 0.41042499311949399*tmp21;
  double tmp23 = tmp19*tmp22;
  double tmp24 = tmp15*tmp3;
  double tmp25 = tmp23*tmp24;
  double tmp26 = tmp16*tmp23;
  double tmp27 = tmp1*tmp19;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = -2*P5;
  double tmp30 = (2*P8 + tmp29)/pow(tmp8, 2);
  double tmp31 = tmp10*(P2 + P8 + tmp29) + 5.0*tmp30*tmp6;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp27*tmp32;
  double tmp34 = tmp19*tmp24;
  double tmp35 = tmp31*tmp5;
  double tmp36 = tmp19*tmp35;
  double tmp37 = 0.41042499311949399*tmp20*tmp30;
  double tmp38 = exp(10.0*tmp6*tmp9);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp28/pow(tmp18, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp22*tmp27;
  double r = (tmp14*(-tmp1*tmp41 + tmp27*tmp37 + tmp31*tmp42) + tmp16*tmp19*tmp37*tmp5 + tmp16*tmp22*tmp36 - tmp16*tmp35*tmp38*tmp40 + tmp23*tmp5*(tmp13 + 0.082084998623898786*tmp36 - 1) - tmp24*tmp41 + tmp25*tmp31 - tmp26 + tmp33*(tmp42 + 1) + tmp34*tmp37 + 0.03368973499542733*tmp21*tmp39*tmp7/pow(tmp18, 4))/sqrt(tmp17) + (-tmp14*tmp33 - 1.0/2.0*tmp16*(2.0*tmp12 + 0.16416999724779757*tmp36 - 2) - tmp32*tmp34)*((1.0/2.0)*tmp14*(tmp27*tmp28 + 2) + tmp25 + tmp26*tmp5)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_0_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp4, 2);
  double tmp9 = pow(tmp6, 2);
  double tmp10 = pow(tmp1, 2) + tmp8 + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp7);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = P3 - P6;
  double tmp21 = tmp11*tmp20;
  double tmp22 = tmp13 + 0.0820849986238988;
  double tmp23 = tmp13/pow(tmp22, 2);
  double tmp24 = 0.41042499311949399*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp17*tmp4;
  double tmp27 = tmp18*tmp6;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = (1.0/2.0)*tmp16;
  double tmp30 = (2*P3 - 2*P6)/pow(tmp10, 2);
  double tmp31 = tmp12*tmp2 + 5.0*tmp30*tmp7;
  double tmp32 = tmp26*tmp31;
  double tmp33 = 0.082084998623898786*tmp23;
  double tmp34 = tmp27*tmp31;
  double tmp35 = tmp1*tmp31;
  double tmp36 = tmp23*tmp35;
  double tmp37 = tmp11*tmp24;
  double tmp38 = tmp20*tmp24*tmp30;
  double tmp39 = exp(10.0*tmp11*tmp7);
  double tmp40 = 0.03368973499542733*tmp21*tmp31*tmp39/pow(tmp22, 4);
  double tmp41 = tmp28*tmp39/pow(tmp22, 3);
  double r = (tmp16*(-tmp1*tmp37 + tmp1*tmp38 + 0.41042499311949399*tmp21*tmp36 + tmp25 - tmp35*tmp41) + tmp25*tmp32 + tmp25*tmp34 - tmp26*tmp37 + tmp26*tmp38 - tmp27*tmp37 + tmp27*tmp38 - tmp32*tmp41 - tmp34*tmp41 + tmp40*tmp8 + tmp40*tmp9 + (-tmp15 + 0.082084998623898786*tmp36)*(tmp1*tmp25 + 1))/sqrt(tmp19) + (tmp25*tmp26 + tmp25*tmp27 + tmp29*(tmp1*tmp23*tmp28 + 2))*(-tmp29*(-2.0*tmp14 + 0.16416999724779757*tmp36) - tmp32*tmp33 - tmp33*tmp34)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_0_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp6, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp4, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp12 + 0.0820849986238988;
  double tmp20 = tmp12/pow(tmp19, 2);
  double tmp21 = P3 - P6;
  double tmp22 = tmp10*tmp21;
  double tmp23 = 0.41042499311949399*tmp22;
  double tmp24 = tmp20*tmp23;
  double tmp25 = tmp16*tmp24;
  double tmp26 = tmp17*tmp6;
  double tmp27 = tmp24*tmp26;
  double tmp28 = tmp1*tmp20;
  double tmp29 = 0.82084998623898797*tmp22;
  double tmp30 = (2*P4 - 2*P7)/pow(tmp9, 2);
  double tmp31 = tmp11*tmp2 + 5.0*tmp30*tmp7;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp28*tmp32;
  double tmp34 = tmp20*tmp26;
  double tmp35 = tmp31*tmp4;
  double tmp36 = tmp20*tmp35;
  double tmp37 = 0.41042499311949399*tmp21*tmp30;
  double tmp38 = exp(10.0*tmp10*tmp7);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp29/pow(tmp19, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp23*tmp28;
  double r = (tmp15*(-tmp1*tmp41 + tmp28*tmp37 + tmp31*tmp42) + tmp16*tmp20*tmp37*tmp4 + tmp16*tmp23*tmp36 - tmp16*tmp35*tmp38*tmp40 + tmp24*tmp4*(-tmp14 + 0.082084998623898786*tmp36) + tmp25 - tmp26*tmp41 + tmp27*tmp31 + tmp33*(tmp42 + 1) + tmp34*tmp37 + 0.03368973499542733*tmp22*tmp39*tmp8/pow(tmp19, 4))/sqrt(tmp18) + (-tmp15*tmp33 - 1.0/2.0*tmp16*(-2.0*tmp13 + 0.16416999724779757*tmp36) - tmp32*tmp34)*((1.0/2.0)*tmp15*(tmp28*tmp29 + 2) + tmp25*tmp4 + tmp27)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_0_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp3, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp12 + 0.0820849986238988;
  double tmp20 = tmp12/pow(tmp19, 2);
  double tmp21 = P3 - P6;
  double tmp22 = tmp10*tmp21;
  double tmp23 = 0.41042499311949399*tmp22;
  double tmp24 = tmp20*tmp23;
  double tmp25 = tmp16*tmp3;
  double tmp26 = tmp24*tmp25;
  double tmp27 = tmp17*tmp24;
  double tmp28 = tmp1*tmp20;
  double tmp29 = 0.82084998623898797*tmp22;
  double tmp30 = (2*P5 - 2*P8)/pow(tmp9, 2);
  double tmp31 = tmp11*tmp4 + 5.0*tmp30*tmp7;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp28*tmp32;
  double tmp34 = tmp20*tmp25;
  double tmp35 = tmp31*tmp6;
  double tmp36 = tmp20*tmp35;
  double tmp37 = 0.41042499311949399*tmp21*tmp30;
  double tmp38 = exp(10.0*tmp10*tmp7);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp29/pow(tmp19, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp23*tmp28;
  double r = (tmp15*(-tmp1*tmp41 + tmp28*tmp37 + tmp31*tmp42) + tmp17*tmp20*tmp37*tmp6 + tmp17*tmp23*tmp36 - tmp17*tmp35*tmp38*tmp40 + tmp24*tmp6*(-tmp14 + 0.082084998623898786*tmp36) - tmp25*tmp41 + tmp26*tmp31 + tmp27 + tmp33*(tmp42 + 1) + tmp34*tmp37 + 0.03368973499542733*tmp22*tmp39*tmp8/pow(tmp19, 4))/sqrt(tmp18) + (-tmp15*tmp33 - 1.0/2.0*tmp17*(-2.0*tmp13 + 0.16416999724779757*tmp36) - tmp32*tmp34)*((1.0/2.0)*tmp15*(tmp28*tmp29 + 2) + tmp26 + tmp27*tmp6)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_1_1(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp6, 2);
  double tmp8 = tmp2 + pow(tmp4, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = tmp9*(tmp1*(-P0 + P3) + tmp4*(-P1 + P4) + tmp6*(-P2 + P5));
  double tmp11 = exp(5.0*tmp10);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = P0 + tmp0 - tmp1*tmp12;
  double tmp14 = P1 - tmp12*tmp4 + tmp3;
  double tmp15 = P2 - tmp12*tmp6 + tmp5;
  double tmp16 = pow(tmp13, 2) + pow(tmp14, 2) + pow(tmp15, 2);
  double tmp17 = tmp1*tmp13;
  double tmp18 = P4 - P7;
  double tmp19 = tmp11 + 0.0820849986238988;
  double tmp20 = tmp11/pow(tmp19, 2);
  double tmp21 = 0.41042499311949399*tmp18*tmp20*tmp9;
  double tmp22 = tmp17*tmp21;
  double tmp23 = tmp15*tmp6;
  double tmp24 = tmp21*tmp23;
  double tmp25 = tmp20*tmp4;
  double tmp26 = tmp18*tmp25*tmp9;
  double tmp27 = (1.0/2.0)*tmp14*(0.82084998623898797*tmp26 + 2);
  double tmp28 = pow(tmp18, 2)/pow(tmp8, 2);
  double tmp29 = tmp28*exp(10.0*tmp10);
  double tmp30 = 0.1684486749771367*tmp29/pow(tmp19, 4);
  double tmp31 = 4.1042499311949401*tmp29/pow(tmp19, 3);
  double tmp32 = 2.05212496559747*tmp28;
  double tmp33 = tmp20*tmp32;
  double r = (tmp14*(tmp25*tmp32 - tmp31*tmp4) - tmp17*tmp31 + tmp17*tmp33 + tmp2*tmp30 - tmp23*tmp31 + tmp23*tmp33 + tmp30*tmp7 + pow(0.41042499311949399*tmp26 + 1, 2))/sqrt(tmp16) + (-tmp22 - tmp24 - tmp27)*(tmp22 + tmp24 + tmp27)/pow(tmp16, 3.0/2.0);
  return r;
}
double d2DdP2_1_2(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp2 + pow(tmp4, 2) + pow(tmp6, 2);
  double tmp8 = 1.0/tmp7;
  double tmp9 = tmp8*(tmp1*(-P0 + P3) + tmp4*(-P1 + P4) + tmp6*(-P2 + P5));
  double tmp10 = exp(5.0*tmp9);
  double tmp11 = 1.0/(12.182493960703473*tmp10 + 1.0);
  double tmp12 = P0 + tmp0 - tmp1*tmp11;
  double tmp13 = P1 - tmp11*tmp4 + tmp3;
  double tmp14 = P2 - tmp11*tmp6 + tmp5;
  double tmp15 = pow(tmp12, 2) + pow(tmp13, 2) + pow(tmp14, 2);
  double tmp16 = P4 - P7;
  double tmp17 = tmp10 + 0.0820849986238988;
  double tmp18 = pow(tmp17, -2);
  double tmp19 = tmp10*tmp18*tmp8;
  double tmp20 = 0.41042499311949399*tmp19;
  double tmp21 = tmp16*tmp20;
  double tmp22 = tmp1*tmp12;
  double tmp23 = tmp21*tmp6;
  double tmp24 = tmp16*tmp4;
  double tmp25 = 0.82084998623898797*tmp19;
  double tmp26 = P5 - P8;
  double tmp27 = tmp20*tmp26;
  double tmp28 = tmp27*tmp4;
  double tmp29 = tmp26*tmp6;
  double tmp30 = exp(10.0*tmp9);
  double tmp31 = pow(tmp7, -2);
  double tmp32 = tmp26*tmp31;
  double tmp33 = tmp16*tmp32;
  double tmp34 = 4.1042499311949401*tmp30/pow(tmp17, 3);
  double tmp35 = tmp22*tmp33;
  double tmp36 = 2.05212496559747*tmp10*tmp18;
  double tmp37 = tmp14*tmp16*tmp29*tmp31;
  double tmp38 = tmp24*tmp32;
  double r = (tmp13*(-tmp34*tmp38 + tmp36*tmp38) + tmp23*(tmp20*tmp29 + 1) + tmp28*(tmp20*tmp24 + 1) - tmp34*tmp35 - tmp34*tmp37 + tmp35*tmp36 + tmp36*tmp37 + 0.1684486749771367*tmp2*tmp30*tmp33/pow(tmp17, 4))/sqrt(tmp15) + (-tmp13*tmp28 - 1.0/2.0*tmp14*(tmp25*tmp29 + 2) - tmp22*tmp27)*((1.0/2.0)*tmp13*(tmp24*tmp25 + 2) + tmp14*tmp23 + tmp21*tmp22)/pow(tmp15, 3.0/2.0);
  return r;
}
double d2DdP2_1_3(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp5, 2);
  double tmp8 = pow(tmp1, 2) + pow(tmp3, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = tmp11 + 0.0820849986238988;
  double tmp19 = tmp11/pow(tmp18, 2);
  double tmp20 = P4 - P7;
  double tmp21 = tmp20*tmp9;
  double tmp22 = 0.41042499311949399*tmp21;
  double tmp23 = tmp19*tmp22;
  double tmp24 = tmp14*tmp23;
  double tmp25 = tmp16*tmp5;
  double tmp26 = tmp23*tmp25;
  double tmp27 = tmp19*tmp3;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = -2*P3;
  double tmp30 = (2*P6 + tmp29)/pow(tmp8, 2);
  double tmp31 = tmp10*(P0 + P6 + tmp29) + 5.0*tmp30*tmp6;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp27*tmp32;
  double tmp34 = tmp19*tmp25;
  double tmp35 = tmp1*tmp31;
  double tmp36 = tmp19*tmp35;
  double tmp37 = 0.41042499311949399*tmp20*tmp30;
  double tmp38 = exp(10.0*tmp6*tmp9);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp28/pow(tmp18, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp22*tmp27;
  double r = (tmp1*tmp14*tmp19*tmp37 + tmp1*tmp23*(tmp13 + 0.082084998623898786*tmp36 - 1) + tmp14*tmp22*tmp36 - tmp14*tmp35*tmp38*tmp40 + tmp15*(tmp27*tmp37 - tmp3*tmp41 + tmp31*tmp42) - tmp24 - tmp25*tmp41 + tmp26*tmp31 + tmp33*(tmp42 + 1) + tmp34*tmp37 + 0.03368973499542733*tmp21*tmp39*tmp7/pow(tmp18, 4))/sqrt(tmp17) + (tmp1*tmp24 + (1.0/2.0)*tmp15*(tmp27*tmp28 + 2) + tmp26)*(-1.0/2.0*tmp14*(2.0*tmp12 + 0.16416999724779757*tmp36 - 2) - tmp15*tmp33 - tmp32*tmp34)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_1_4(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2);
  double tmp8 = pow(tmp5, 2);
  double tmp9 = pow(tmp3, 2) + tmp7 + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp6);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp5 + tmp4;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = P4 - P7;
  double tmp20 = tmp12 + 0.0820849986238988;
  double tmp21 = tmp12/pow(tmp20, 2);
  double tmp22 = 0.41042499311949399*tmp10;
  double tmp23 = tmp21*tmp22;
  double tmp24 = tmp19*tmp23;
  double tmp25 = tmp1*tmp15;
  double tmp26 = tmp17*tmp5;
  double tmp27 = tmp21*tmp3;
  double tmp28 = tmp10*tmp19;
  double tmp29 = 0.82084998623898797*tmp28;
  double tmp30 = (1.0/2.0)*tmp16;
  double tmp31 = -2*P4;
  double tmp32 = (2*P7 + tmp31)/pow(tmp9, 2);
  double tmp33 = tmp11*(P1 + P7 + tmp31) + 5.0*tmp32*tmp6;
  double tmp34 = tmp25*tmp33;
  double tmp35 = 0.082084998623898786*tmp21;
  double tmp36 = tmp26*tmp33;
  double tmp37 = tmp3*tmp33;
  double tmp38 = tmp21*tmp37;
  double tmp39 = 0.41042499311949399*tmp19*tmp32;
  double tmp40 = tmp21*tmp39;
  double tmp41 = exp(10.0*tmp10*tmp6);
  double tmp42 = 0.03368973499542733*tmp28*tmp33*tmp41/pow(tmp20, 4);
  double tmp43 = tmp29*tmp41/pow(tmp20, 3);
  double tmp44 = tmp23*tmp3;
  double r = (tmp16*(tmp19*tmp22*tmp38 - tmp24 + tmp27*tmp39 - tmp37*tmp43 + tmp44) + tmp23*tmp25 + tmp23*tmp26 + tmp24*tmp34 + tmp24*tmp36 + tmp25*tmp40 + tmp26*tmp40 - tmp34*tmp43 - tmp36*tmp43 + tmp42*tmp7 + tmp42*tmp8 + (tmp19*tmp44 + 1)*(tmp14 + 0.082084998623898786*tmp38 - 1))/sqrt(tmp18) + (tmp24*tmp25 + tmp24*tmp26 + tmp30*(tmp27*tmp29 + 2))*(-tmp30*(2.0*tmp13 + 0.16416999724779757*tmp38 - 2) - tmp34*tmp35 - tmp35*tmp36)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_1_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2);
  double tmp8 = pow(tmp3, 2) + pow(tmp5, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = tmp11 + 0.0820849986238988;
  double tmp19 = tmp11/pow(tmp18, 2);
  double tmp20 = P4 - P7;
  double tmp21 = tmp20*tmp9;
  double tmp22 = 0.41042499311949399*tmp21;
  double tmp23 = tmp19*tmp22;
  double tmp24 = tmp1*tmp14;
  double tmp25 = tmp23*tmp24;
  double tmp26 = tmp16*tmp23;
  double tmp27 = tmp19*tmp3;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = -2*P5;
  double tmp30 = (2*P8 + tmp29)/pow(tmp8, 2);
  double tmp31 = tmp10*(P2 + P8 + tmp29) + 5.0*tmp30*tmp6;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp19*tmp24;
  double tmp34 = tmp27*tmp32;
  double tmp35 = tmp31*tmp5;
  double tmp36 = tmp19*tmp35;
  double tmp37 = 0.41042499311949399*tmp20*tmp30;
  double tmp38 = exp(10.0*tmp6*tmp9);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp28/pow(tmp18, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp22*tmp27;
  double r = (tmp15*(tmp27*tmp37 - tmp3*tmp41 + tmp31*tmp42) + tmp16*tmp19*tmp37*tmp5 + tmp16*tmp22*tmp36 - tmp16*tmp35*tmp38*tmp40 + tmp23*tmp5*(tmp13 + 0.082084998623898786*tmp36 - 1) - tmp24*tmp41 + tmp25*tmp31 - tmp26 + tmp33*tmp37 + tmp34*(tmp42 + 1) + 0.03368973499542733*tmp21*tmp39*tmp7/pow(tmp18, 4))/sqrt(tmp17) + (-tmp15*tmp34 - 1.0/2.0*tmp16*(2.0*tmp12 + 0.16416999724779757*tmp36 - 2) - tmp32*tmp33)*((1.0/2.0)*tmp15*(tmp27*tmp28 + 2) + tmp25 + tmp26*tmp5)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_1_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp6, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp4, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp12 + 0.0820849986238988;
  double tmp20 = tmp12/pow(tmp19, 2);
  double tmp21 = P4 - P7;
  double tmp22 = tmp10*tmp21;
  double tmp23 = 0.41042499311949399*tmp22;
  double tmp24 = tmp20*tmp23;
  double tmp25 = tmp15*tmp24;
  double tmp26 = tmp17*tmp6;
  double tmp27 = tmp24*tmp26;
  double tmp28 = tmp20*tmp4;
  double tmp29 = 0.82084998623898797*tmp22;
  double tmp30 = (2*P3 - 2*P6)/pow(tmp9, 2);
  double tmp31 = tmp11*tmp2 + 5.0*tmp30*tmp7;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp28*tmp32;
  double tmp34 = tmp20*tmp26;
  double tmp35 = tmp1*tmp31;
  double tmp36 = tmp20*tmp35;
  double tmp37 = 0.41042499311949399*tmp21*tmp30;
  double tmp38 = exp(10.0*tmp10*tmp7);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp29/pow(tmp19, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp23*tmp28;
  double r = (tmp1*tmp15*tmp20*tmp37 + tmp1*tmp24*(-tmp14 + 0.082084998623898786*tmp36) + tmp15*tmp23*tmp36 - tmp15*tmp35*tmp38*tmp40 + tmp16*(tmp28*tmp37 + tmp31*tmp42 - tmp4*tmp41) + tmp25 - tmp26*tmp41 + tmp27*tmp31 + tmp33*(tmp42 + 1) + tmp34*tmp37 + 0.03368973499542733*tmp22*tmp39*tmp8/pow(tmp19, 4))/sqrt(tmp18) + (tmp1*tmp25 + (1.0/2.0)*tmp16*(tmp28*tmp29 + 2) + tmp27)*(-1.0/2.0*tmp15*(-2.0*tmp13 + 0.16416999724779757*tmp36) - tmp16*tmp33 - tmp32*tmp34)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_1_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp6, 2);
  double tmp10 = pow(tmp4, 2) + tmp8 + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp7);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = P4 - P7;
  double tmp21 = tmp11*tmp20;
  double tmp22 = tmp13 + 0.0820849986238988;
  double tmp23 = tmp13/pow(tmp22, 2);
  double tmp24 = 0.41042499311949399*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp1*tmp16;
  double tmp27 = tmp18*tmp6;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = (1.0/2.0)*tmp17;
  double tmp30 = (2*P4 - 2*P7)/pow(tmp10, 2);
  double tmp31 = tmp12*tmp2 + 5.0*tmp30*tmp7;
  double tmp32 = tmp26*tmp31;
  double tmp33 = 0.082084998623898786*tmp23;
  double tmp34 = tmp27*tmp31;
  double tmp35 = tmp31*tmp4;
  double tmp36 = tmp23*tmp35;
  double tmp37 = tmp11*tmp24;
  double tmp38 = tmp20*tmp24*tmp30;
  double tmp39 = exp(10.0*tmp11*tmp7);
  double tmp40 = 0.03368973499542733*tmp21*tmp31*tmp39/pow(tmp22, 4);
  double tmp41 = tmp28*tmp39/pow(tmp22, 3);
  double r = (tmp17*(0.41042499311949399*tmp21*tmp36 + tmp25 - tmp35*tmp41 - tmp37*tmp4 + tmp38*tmp4) + tmp25*tmp32 + tmp25*tmp34 - tmp26*tmp37 + tmp26*tmp38 - tmp27*tmp37 + tmp27*tmp38 - tmp32*tmp41 - tmp34*tmp41 + tmp40*tmp8 + tmp40*tmp9 + (-tmp15 + 0.082084998623898786*tmp36)*(tmp25*tmp4 + 1))/sqrt(tmp19) + (tmp25*tmp26 + tmp25*tmp27 + tmp29*(tmp23*tmp28*tmp4 + 2))*(-tmp29*(-2.0*tmp14 + 0.16416999724779757*tmp36) - tmp32*tmp33 - tmp33*tmp34)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_1_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp3, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp12 + 0.0820849986238988;
  double tmp20 = tmp12/pow(tmp19, 2);
  double tmp21 = P4 - P7;
  double tmp22 = tmp10*tmp21;
  double tmp23 = 0.41042499311949399*tmp22;
  double tmp24 = tmp20*tmp23;
  double tmp25 = tmp1*tmp15;
  double tmp26 = tmp24*tmp25;
  double tmp27 = tmp17*tmp24;
  double tmp28 = tmp20*tmp3;
  double tmp29 = 0.82084998623898797*tmp22;
  double tmp30 = (2*P5 - 2*P8)/pow(tmp9, 2);
  double tmp31 = tmp11*tmp4 + 5.0*tmp30*tmp7;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp20*tmp25;
  double tmp34 = tmp28*tmp32;
  double tmp35 = tmp31*tmp6;
  double tmp36 = tmp20*tmp35;
  double tmp37 = 0.41042499311949399*tmp21*tmp30;
  double tmp38 = exp(10.0*tmp10*tmp7);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp29/pow(tmp19, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp23*tmp28;
  double r = (tmp16*(tmp28*tmp37 - tmp3*tmp41 + tmp31*tmp42) + tmp17*tmp20*tmp37*tmp6 + tmp17*tmp23*tmp36 - tmp17*tmp35*tmp38*tmp40 + tmp24*tmp6*(-tmp14 + 0.082084998623898786*tmp36) - tmp25*tmp41 + tmp26*tmp31 + tmp27 + tmp33*tmp37 + tmp34*(tmp42 + 1) + 0.03368973499542733*tmp22*tmp39*tmp8/pow(tmp19, 4))/sqrt(tmp18) + (-tmp16*tmp34 - 1.0/2.0*tmp17*(-2.0*tmp13 + 0.16416999724779757*tmp36) - tmp32*tmp33)*((1.0/2.0)*tmp16*(tmp28*tmp29 + 2) + tmp26 + tmp27*tmp6)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_2_2(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = pow(tmp4, 2);
  double tmp6 = -P5;
  double tmp7 = P8 + tmp6;
  double tmp8 = tmp2 + tmp5 + pow(tmp7, 2);
  double tmp9 = 1.0/tmp8;
  double tmp10 = tmp9*(tmp1*(-P0 + P3) + tmp4*(-P1 + P4) + tmp7*(-P2 + P5));
  double tmp11 = exp(5.0*tmp10);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = P0 + tmp0 - tmp1*tmp12;
  double tmp14 = P1 - tmp12*tmp4 + tmp3;
  double tmp15 = P2 - tmp12*tmp7 + tmp6;
  double tmp16 = pow(tmp13, 2) + pow(tmp14, 2) + pow(tmp15, 2);
  double tmp17 = tmp1*tmp13;
  double tmp18 = P5 - P8;
  double tmp19 = tmp11 + 0.0820849986238988;
  double tmp20 = tmp11/pow(tmp19, 2);
  double tmp21 = 0.41042499311949399*tmp18*tmp20*tmp9;
  double tmp22 = tmp17*tmp21;
  double tmp23 = tmp14*tmp4;
  double tmp24 = tmp21*tmp23;
  double tmp25 = tmp20*tmp7;
  double tmp26 = tmp18*tmp25*tmp9;
  double tmp27 = (1.0/2.0)*tmp15*(0.82084998623898797*tmp26 + 2);
  double tmp28 = pow(tmp18, 2)/pow(tmp8, 2);
  double tmp29 = tmp28*exp(10.0*tmp10);
  double tmp30 = 0.1684486749771367*tmp29/pow(tmp19, 4);
  double tmp31 = 4.1042499311949401*tmp29/pow(tmp19, 3);
  double tmp32 = 2.05212496559747*tmp28;
  double tmp33 = tmp20*tmp32;
  double r = (tmp15*(tmp25*tmp32 - tmp31*tmp7) - tmp17*tmp31 + tmp17*tmp33 + tmp2*tmp30 - tmp23*tmp31 + tmp23*tmp33 + tmp30*tmp5 + pow(0.41042499311949399*tmp26 + 1, 2))/sqrt(tmp16) + (-tmp22 - tmp24 - tmp27)*(tmp22 + tmp24 + tmp27)/pow(tmp16, 3.0/2.0);
  return r;
}
double d2DdP2_2_3(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp3, 2);
  double tmp8 = pow(tmp1, 2) + pow(tmp5, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = tmp11 + 0.0820849986238988;
  double tmp19 = tmp11/pow(tmp18, 2);
  double tmp20 = P5 - P8;
  double tmp21 = tmp20*tmp9;
  double tmp22 = 0.41042499311949399*tmp21;
  double tmp23 = tmp19*tmp22;
  double tmp24 = tmp14*tmp23;
  double tmp25 = tmp15*tmp3;
  double tmp26 = tmp23*tmp25;
  double tmp27 = tmp19*tmp5;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = -2*P3;
  double tmp30 = (2*P6 + tmp29)/pow(tmp8, 2);
  double tmp31 = tmp10*(P0 + P6 + tmp29) + 5.0*tmp30*tmp6;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp19*tmp25;
  double tmp34 = tmp27*tmp32;
  double tmp35 = tmp1*tmp31;
  double tmp36 = tmp19*tmp35;
  double tmp37 = 0.41042499311949399*tmp20*tmp30;
  double tmp38 = exp(10.0*tmp6*tmp9);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp28/pow(tmp18, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp22*tmp27;
  double r = (tmp1*tmp14*tmp19*tmp37 + tmp1*tmp23*(tmp13 + 0.082084998623898786*tmp36 - 1) + tmp14*tmp22*tmp36 - tmp14*tmp35*tmp38*tmp40 + tmp16*(tmp27*tmp37 + tmp31*tmp42 - tmp41*tmp5) - tmp24 - tmp25*tmp41 + tmp26*tmp31 + tmp33*tmp37 + tmp34*(tmp42 + 1) + 0.03368973499542733*tmp21*tmp39*tmp7/pow(tmp18, 4))/sqrt(tmp17) + (tmp1*tmp24 + (1.0/2.0)*tmp16*(tmp27*tmp28 + 2) + tmp26)*(-1.0/2.0*tmp14*(2.0*tmp12 + 0.16416999724779757*tmp36 - 2) - tmp16*tmp34 - tmp32*tmp33)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_2_4(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2);
  double tmp8 = pow(tmp3, 2) + pow(tmp5, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = tmp11 + 0.0820849986238988;
  double tmp19 = tmp11/pow(tmp18, 2);
  double tmp20 = P5 - P8;
  double tmp21 = tmp20*tmp9;
  double tmp22 = 0.41042499311949399*tmp21;
  double tmp23 = tmp19*tmp22;
  double tmp24 = tmp1*tmp14;
  double tmp25 = tmp23*tmp24;
  double tmp26 = tmp15*tmp23;
  double tmp27 = tmp19*tmp5;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = -2*P4;
  double tmp30 = (2*P7 + tmp29)/pow(tmp8, 2);
  double tmp31 = tmp10*(P1 + P7 + tmp29) + 5.0*tmp30*tmp6;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp19*tmp24;
  double tmp34 = tmp27*tmp32;
  double tmp35 = tmp3*tmp31;
  double tmp36 = tmp19*tmp35;
  double tmp37 = 0.41042499311949399*tmp20*tmp30;
  double tmp38 = exp(10.0*tmp6*tmp9);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp28/pow(tmp18, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp22*tmp27;
  double r = (tmp15*tmp19*tmp3*tmp37 + tmp15*tmp22*tmp36 - tmp15*tmp35*tmp38*tmp40 + tmp16*(tmp27*tmp37 + tmp31*tmp42 - tmp41*tmp5) + tmp23*tmp3*(tmp13 + 0.082084998623898786*tmp36 - 1) - tmp24*tmp41 + tmp25*tmp31 - tmp26 + tmp33*tmp37 + tmp34*(tmp42 + 1) + 0.03368973499542733*tmp21*tmp39*tmp7/pow(tmp18, 4))/sqrt(tmp17) + (-1.0/2.0*tmp15*(2.0*tmp12 + 0.16416999724779757*tmp36 - 2) - tmp16*tmp34 - tmp32*tmp33)*((1.0/2.0)*tmp16*(tmp27*tmp28 + 2) + tmp25 + tmp26*tmp3)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_2_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2);
  double tmp8 = pow(tmp3, 2);
  double tmp9 = pow(tmp5, 2) + tmp7 + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp6);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp5 + tmp4;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = P5 - P8;
  double tmp20 = tmp12 + 0.0820849986238988;
  double tmp21 = tmp12/pow(tmp20, 2);
  double tmp22 = 0.41042499311949399*tmp10;
  double tmp23 = tmp21*tmp22;
  double tmp24 = tmp19*tmp23;
  double tmp25 = tmp1*tmp15;
  double tmp26 = tmp16*tmp3;
  double tmp27 = tmp21*tmp5;
  double tmp28 = tmp10*tmp19;
  double tmp29 = 0.82084998623898797*tmp28;
  double tmp30 = (1.0/2.0)*tmp17;
  double tmp31 = -2*P5;
  double tmp32 = (2*P8 + tmp31)/pow(tmp9, 2);
  double tmp33 = tmp11*(P2 + P8 + tmp31) + 5.0*tmp32*tmp6;
  double tmp34 = tmp25*tmp33;
  double tmp35 = 0.082084998623898786*tmp21;
  double tmp36 = tmp26*tmp33;
  double tmp37 = tmp33*tmp5;
  double tmp38 = tmp21*tmp37;
  double tmp39 = 0.41042499311949399*tmp19*tmp32;
  double tmp40 = tmp21*tmp39;
  double tmp41 = exp(10.0*tmp10*tmp6);
  double tmp42 = 0.03368973499542733*tmp28*tmp33*tmp41/pow(tmp20, 4);
  double tmp43 = tmp29*tmp41/pow(tmp20, 3);
  double tmp44 = tmp23*tmp5;
  double r = (tmp17*(tmp19*tmp22*tmp38 - tmp24 + tmp27*tmp39 - tmp37*tmp43 + tmp44) + tmp23*tmp25 + tmp23*tmp26 + tmp24*tmp34 + tmp24*tmp36 + tmp25*tmp40 + tmp26*tmp40 - tmp34*tmp43 - tmp36*tmp43 + tmp42*tmp7 + tmp42*tmp8 + (tmp19*tmp44 + 1)*(tmp14 + 0.082084998623898786*tmp38 - 1))/sqrt(tmp18) + (tmp24*tmp25 + tmp24*tmp26 + tmp30*(tmp27*tmp29 + 2))*(-tmp30*(2.0*tmp13 + 0.16416999724779757*tmp38 - 2) - tmp34*tmp35 - tmp35*tmp36)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_2_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp4, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp12 + 0.0820849986238988;
  double tmp20 = tmp12/pow(tmp19, 2);
  double tmp21 = P5 - P8;
  double tmp22 = tmp10*tmp21;
  double tmp23 = 0.41042499311949399*tmp22;
  double tmp24 = tmp20*tmp23;
  double tmp25 = tmp15*tmp24;
  double tmp26 = tmp16*tmp4;
  double tmp27 = tmp24*tmp26;
  double tmp28 = tmp20*tmp6;
  double tmp29 = 0.82084998623898797*tmp22;
  double tmp30 = (2*P3 - 2*P6)/pow(tmp9, 2);
  double tmp31 = tmp11*tmp2 + 5.0*tmp30*tmp7;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp20*tmp26;
  double tmp34 = tmp28*tmp32;
  double tmp35 = tmp1*tmp31;
  double tmp36 = tmp20*tmp35;
  double tmp37 = 0.41042499311949399*tmp21*tmp30;
  double tmp38 = exp(10.0*tmp10*tmp7);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp29/pow(tmp19, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp23*tmp28;
  double r = (tmp1*tmp15*tmp20*tmp37 + tmp1*tmp24*(-tmp14 + 0.082084998623898786*tmp36) + tmp15*tmp23*tmp36 - tmp15*tmp35*tmp38*tmp40 + tmp17*(tmp28*tmp37 + tmp31*tmp42 - tmp41*tmp6) + tmp25 - tmp26*tmp41 + tmp27*tmp31 + tmp33*tmp37 + tmp34*(tmp42 + 1) + 0.03368973499542733*tmp22*tmp39*tmp8/pow(tmp19, 4))/sqrt(tmp18) + (tmp1*tmp25 + (1.0/2.0)*tmp17*(tmp28*tmp29 + 2) + tmp27)*(-1.0/2.0*tmp15*(-2.0*tmp13 + 0.16416999724779757*tmp36) - tmp17*tmp34 - tmp32*tmp33)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_2_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp4, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp12 + 0.0820849986238988;
  double tmp20 = tmp12/pow(tmp19, 2);
  double tmp21 = P5 - P8;
  double tmp22 = tmp10*tmp21;
  double tmp23 = 0.41042499311949399*tmp22;
  double tmp24 = tmp20*tmp23;
  double tmp25 = tmp1*tmp15;
  double tmp26 = tmp24*tmp25;
  double tmp27 = tmp16*tmp24;
  double tmp28 = tmp20*tmp6;
  double tmp29 = 0.82084998623898797*tmp22;
  double tmp30 = (2*P4 - 2*P7)/pow(tmp9, 2);
  double tmp31 = tmp11*tmp2 + 5.0*tmp30*tmp7;
  double tmp32 = 0.082084998623898786*tmp31;
  double tmp33 = tmp20*tmp25;
  double tmp34 = tmp28*tmp32;
  double tmp35 = tmp31*tmp4;
  double tmp36 = tmp20*tmp35;
  double tmp37 = 0.41042499311949399*tmp21*tmp30;
  double tmp38 = exp(10.0*tmp10*tmp7);
  double tmp39 = tmp31*tmp38;
  double tmp40 = tmp29/pow(tmp19, 3);
  double tmp41 = tmp39*tmp40;
  double tmp42 = tmp23*tmp28;
  double r = (tmp16*tmp20*tmp37*tmp4 + tmp16*tmp23*tmp36 - tmp16*tmp35*tmp38*tmp40 + tmp17*(tmp28*tmp37 + tmp31*tmp42 - tmp41*tmp6) + tmp24*tmp4*(-tmp14 + 0.082084998623898786*tmp36) - tmp25*tmp41 + tmp26*tmp31 + tmp27 + tmp33*tmp37 + tmp34*(tmp42 + 1) + 0.03368973499542733*tmp22*tmp39*tmp8/pow(tmp19, 4))/sqrt(tmp18) + (-1.0/2.0*tmp16*(-2.0*tmp13 + 0.16416999724779757*tmp36) - tmp17*tmp34 - tmp32*tmp33)*((1.0/2.0)*tmp17*(tmp28*tmp29 + 2) + tmp26 + tmp27*tmp4)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_2_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp3, 2);
  double tmp10 = pow(tmp6, 2) + tmp8 + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp7);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp3 + tmp2;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = P5 - P8;
  double tmp21 = tmp11*tmp20;
  double tmp22 = tmp13 + 0.0820849986238988;
  double tmp23 = tmp13/pow(tmp22, 2);
  double tmp24 = 0.41042499311949399*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp1*tmp16;
  double tmp27 = tmp17*tmp3;
  double tmp28 = 0.82084998623898797*tmp21;
  double tmp29 = (1.0/2.0)*tmp18;
  double tmp30 = (2*P5 - 2*P8)/pow(tmp10, 2);
  double tmp31 = tmp12*tmp4 + 5.0*tmp30*tmp7;
  double tmp32 = tmp26*tmp31;
  double tmp33 = 0.082084998623898786*tmp23;
  double tmp34 = tmp27*tmp31;
  double tmp35 = tmp31*tmp6;
  double tmp36 = tmp23*tmp35;
  double tmp37 = tmp11*tmp24;
  double tmp38 = tmp20*tmp24*tmp30;
  double tmp39 = exp(10.0*tmp11*tmp7);
  double tmp40 = 0.03368973499542733*tmp21*tmp31*tmp39/pow(tmp22, 4);
  double tmp41 = tmp28*tmp39/pow(tmp22, 3);
  double r = (tmp18*(0.41042499311949399*tmp21*tmp36 + tmp25 - tmp35*tmp41 - tmp37*tmp6 + tmp38*tmp6) + tmp25*tmp32 + tmp25*tmp34 - tmp26*tmp37 + tmp26*tmp38 - tmp27*tmp37 + tmp27*tmp38 - tmp32*tmp41 - tmp34*tmp41 + tmp40*tmp8 + tmp40*tmp9 + (-tmp15 + 0.082084998623898786*tmp36)*(tmp25*tmp6 + 1))/sqrt(tmp19) + (tmp25*tmp26 + tmp25*tmp27 + tmp29*(tmp23*tmp28*tmp6 + 2))*(-tmp29*(-2.0*tmp14 + 0.16416999724779757*tmp36) - tmp32*tmp33 - tmp33*tmp34)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_3_3(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = pow(tmp3, 2);
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp6, 2);
  double tmp8 = pow(tmp1, 2) + tmp4 + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp9);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp16*tmp3;
  double tmp20 = -2*P3;
  double tmp21 = P0 + P6 + tmp20;
  double tmp22 = tmp21*tmp9;
  double tmp23 = pow(tmp8, -2);
  double tmp24 = 2*P6 + tmp20;
  double tmp25 = tmp23*tmp24;
  double tmp26 = tmp12 + 0.0820849986238988;
  double tmp27 = pow(tmp26, -2);
  double tmp28 = tmp12*tmp27;
  double tmp29 = tmp28*(tmp11*tmp25 + 5.0*tmp22);
  double tmp30 = 0.082084998623898786*tmp29;
  double tmp31 = tmp19*tmp30;
  double tmp32 = tmp17*tmp6;
  double tmp33 = tmp30*tmp32;
  double tmp34 = 0.16416999724779757*tmp29;
  double tmp35 = (1.0/2.0)*tmp15*(tmp1*tmp34 + 2.0*tmp13 - 2);
  double tmp36 = tmp10*tmp23;
  double tmp37 = pow(tmp22 + tmp24*tmp36, 2);
  double tmp38 = 10.0*tmp9;
  double tmp39 = exp(tmp10*tmp38);
  double tmp40 = 0.16844867497713664*tmp37*tmp39/pow(tmp26, 4);
  double tmp41 = 4.1042499311949392*tmp39/pow(tmp26, 3);
  double tmp42 = tmp37*tmp41;
  double tmp43 = 25.0*tmp37;
  double tmp44 = tmp28*(tmp11*tmp24*(-4*P3 + 4*P6)/pow(tmp8, 3) + 10.0*tmp21*tmp25 - 10.0*tmp36 - tmp38);
  double tmp45 = 0.082084998623898786*tmp44;
  double tmp46 = 0.082084998623898786*tmp1;
  double tmp47 = tmp29*tmp46 - 1;
  double r = (0.082084998623898786*tmp12*tmp16*tmp27*tmp3*tmp43 + 0.082084998623898786*tmp12*tmp17*tmp27*tmp43*tmp6 + tmp15*(0.082084998623898786*tmp1*tmp12*tmp27*tmp43 - tmp1*tmp37*tmp41 - tmp34 + tmp44*tmp46) - tmp19*tmp42 + tmp19*tmp45 - tmp32*tmp42 + tmp32*tmp45 + tmp4*tmp40 + tmp40*tmp7 + (tmp13 + tmp47)*(tmp14 + tmp47))/sqrt(tmp18) + (-tmp31 - tmp33 - tmp35)*(tmp31 + tmp33 + tmp35)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_3_4(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp5, 2);
  double tmp8 = pow(tmp1, 2) + pow(tmp3, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = -2*P4;
  double tmp19 = P1 + P7 + tmp18;
  double tmp20 = 5.0/pow(tmp8, 2);
  double tmp21 = tmp20*(2*P7 + tmp18);
  double tmp22 = tmp10*tmp19 + tmp21*tmp6;
  double tmp23 = tmp11 + 0.0820849986238988;
  double tmp24 = tmp11/pow(tmp23, 2);
  double tmp25 = 0.082084998623898786*tmp24;
  double tmp26 = tmp22*tmp25;
  double tmp27 = tmp1*tmp26;
  double tmp28 = tmp16*tmp5;
  double tmp29 = tmp26*tmp28;
  double tmp30 = 0.16416999724779757*tmp24;
  double tmp31 = tmp22*tmp3;
  double tmp32 = 2.0*tmp12 - 2;
  double tmp33 = -2*P3;
  double tmp34 = P0 + P6 + tmp33;
  double tmp35 = 2*P6 + tmp33;
  double tmp36 = tmp20*tmp35;
  double tmp37 = tmp10*tmp34 + tmp36*tmp6;
  double tmp38 = tmp25*tmp37;
  double tmp39 = tmp15*tmp38;
  double tmp40 = tmp1*tmp37;
  double tmp41 = exp(10.0*tmp6*tmp9);
  double tmp42 = tmp22*tmp41;
  double tmp43 = tmp19*tmp36 + tmp21*tmp34 + 5.0*tmp35*tmp6*(-4*P4 + 4*P7)/pow(tmp8, 3);
  double tmp44 = tmp25*tmp43;
  double tmp45 = 0.16416999724779757/pow(tmp23, 3);
  double tmp46 = tmp15*tmp37;
  double tmp47 = tmp26*tmp3;
  double tmp48 = tmp42*tmp45;
  double tmp49 = tmp1*tmp25;
  double r = (tmp14*(tmp26*tmp40 - tmp26 - tmp40*tmp48 + tmp43*tmp49) + tmp15*tmp3*tmp44 + tmp27*(tmp12 + tmp37*tmp49 - 1) - tmp28*tmp37*tmp48 + tmp28*tmp44 + tmp29*tmp37 + tmp3*tmp38*(tmp13 + tmp47 - 1) - tmp31*tmp41*tmp45*tmp46 - tmp39 + tmp46*tmp47 + 0.0067379469990854653*tmp37*tmp42*tmp7/pow(tmp23, 4))/sqrt(tmp17) + (-tmp14*tmp27 - 1.0/2.0*tmp15*(tmp30*tmp31 + tmp32) - tmp29)*((1.0/2.0)*tmp14*(tmp30*tmp40 + tmp32) + tmp28*tmp38 + tmp3*tmp39)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_3_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp3, 2);
  double tmp8 = pow(tmp1, 2) + pow(tmp5, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = -2*P5;
  double tmp19 = P2 + P8 + tmp18;
  double tmp20 = 5.0/pow(tmp8, 2);
  double tmp21 = tmp20*(2*P8 + tmp18);
  double tmp22 = tmp10*tmp19 + tmp21*tmp6;
  double tmp23 = tmp11 + 0.0820849986238988;
  double tmp24 = tmp11/pow(tmp23, 2);
  double tmp25 = 0.082084998623898786*tmp24;
  double tmp26 = tmp22*tmp25;
  double tmp27 = tmp1*tmp26;
  double tmp28 = tmp15*tmp3;
  double tmp29 = tmp26*tmp28;
  double tmp30 = 0.16416999724779757*tmp24;
  double tmp31 = tmp22*tmp5;
  double tmp32 = 2.0*tmp12 - 2;
  double tmp33 = -2*P3;
  double tmp34 = P0 + P6 + tmp33;
  double tmp35 = 2*P6 + tmp33;
  double tmp36 = tmp20*tmp35;
  double tmp37 = tmp10*tmp34 + tmp36*tmp6;
  double tmp38 = tmp25*tmp37;
  double tmp39 = tmp16*tmp38;
  double tmp40 = tmp1*tmp37;
  double tmp41 = exp(10.0*tmp6*tmp9);
  double tmp42 = tmp22*tmp41;
  double tmp43 = tmp19*tmp36 + tmp21*tmp34 + 5.0*tmp35*tmp6*(-4*P5 + 4*P8)/pow(tmp8, 3);
  double tmp44 = tmp25*tmp43;
  double tmp45 = 0.16416999724779757/pow(tmp23, 3);
  double tmp46 = tmp42*tmp45;
  double tmp47 = tmp16*tmp37;
  double tmp48 = tmp26*tmp5;
  double tmp49 = tmp1*tmp25;
  double r = (tmp14*(tmp26*tmp40 - tmp26 - tmp40*tmp46 + tmp43*tmp49) + tmp16*tmp44*tmp5 + tmp27*(tmp12 + tmp37*tmp49 - 1) - tmp28*tmp37*tmp46 + tmp28*tmp44 + tmp29*tmp37 - tmp31*tmp41*tmp45*tmp47 + tmp38*tmp5*(tmp13 + tmp48 - 1) - tmp39 + tmp47*tmp48 + 0.0067379469990854653*tmp37*tmp42*tmp7/pow(tmp23, 4))/sqrt(tmp17) + (-tmp14*tmp27 - 1.0/2.0*tmp16*(tmp30*tmp31 + tmp32) - tmp29)*((1.0/2.0)*tmp14*(tmp30*tmp40 + tmp32) + tmp28*tmp38 + tmp39*tmp5)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_3_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp4, 2);
  double tmp9 = pow(tmp6, 2);
  double tmp10 = pow(tmp1, 2) + tmp8 + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp7);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = 2*P3;
  double tmp21 = 2*P6;
  double tmp22 = tmp20 - tmp21;
  double tmp23 = pow(tmp10, -2);
  double tmp24 = 5.0*tmp23;
  double tmp25 = tmp24*tmp7;
  double tmp26 = tmp12*tmp2 + tmp22*tmp25;
  double tmp27 = tmp13 + 0.0820849986238988;
  double tmp28 = tmp13/pow(tmp27, 2);
  double tmp29 = 0.082084998623898786*tmp28;
  double tmp30 = tmp26*tmp29;
  double tmp31 = tmp17*tmp4;
  double tmp32 = tmp18*tmp6;
  double tmp33 = 2.0*tmp14;
  double tmp34 = tmp1*tmp28;
  double tmp35 = (1.0/2.0)*tmp16;
  double tmp36 = -tmp20;
  double tmp37 = P0 + P6 + tmp36;
  double tmp38 = tmp21 + tmp36;
  double tmp39 = tmp12*tmp37 + tmp25*tmp38;
  double tmp40 = tmp29*tmp39;
  double tmp41 = tmp31*tmp40;
  double tmp42 = tmp32*tmp40;
  double tmp43 = 0.16416999724779757*tmp39;
  double tmp44 = 10.0*tmp7;
  double tmp45 = tmp26*exp(tmp11*tmp44);
  double tmp46 = 0.0067379469990854653*tmp39*tmp45/pow(tmp27, 4);
  double tmp47 = tmp43*tmp45/pow(tmp27, 3);
  double tmp48 = tmp29*(tmp12 + tmp2*tmp24*tmp38 + tmp22*tmp24*tmp37 + tmp23*tmp44 + 5.0*tmp38*tmp7*(4*P3 - 4*P6)/pow(tmp10, 3));
  double tmp49 = tmp1*tmp40;
  double r = (tmp16*(-tmp1*tmp47 + tmp1*tmp48 + tmp26*tmp49 - tmp30 + tmp40) + tmp26*tmp41 + tmp26*tmp42 - tmp31*tmp47 + tmp31*tmp48 - tmp32*tmp47 + tmp32*tmp48 + tmp46*tmp8 + tmp46*tmp9 + (tmp1*tmp30 - tmp15)*(tmp14 + tmp49 - 1))/sqrt(tmp19) + (-tmp30*tmp31 - tmp30*tmp32 - tmp35*(0.16416999724779757*tmp26*tmp34 - tmp33))*(tmp35*(tmp33 + tmp34*tmp43 - 2) + tmp41 + tmp42)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_3_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp6, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp4, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = 5.0/pow(tmp9, 2);
  double tmp20 = tmp19*(2*P4 - 2*P7);
  double tmp21 = tmp11*tmp2 + tmp20*tmp7;
  double tmp22 = tmp12 + 0.0820849986238988;
  double tmp23 = tmp12/pow(tmp22, 2);
  double tmp24 = 0.082084998623898786*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp1*tmp25;
  double tmp27 = tmp17*tmp6;
  double tmp28 = tmp25*tmp27;
  double tmp29 = 2.0*tmp13;
  double tmp30 = 0.16416999724779757*tmp23;
  double tmp31 = tmp21*tmp4;
  double tmp32 = -2*P3;
  double tmp33 = P0 + P6 + tmp32;
  double tmp34 = 2*P6 + tmp32;
  double tmp35 = tmp19*tmp34;
  double tmp36 = tmp11*tmp33 + tmp35*tmp7;
  double tmp37 = tmp24*tmp36;
  double tmp38 = tmp16*tmp37;
  double tmp39 = tmp1*tmp36;
  double tmp40 = exp(10.0*tmp10*tmp7);
  double tmp41 = tmp21*tmp40;
  double tmp42 = tmp2*tmp35 + tmp20*tmp33 + 5.0*tmp34*tmp7*(4*P4 - 4*P7)/pow(tmp9, 3);
  double tmp43 = tmp24*tmp42;
  double tmp44 = 0.16416999724779757/pow(tmp22, 3);
  double tmp45 = tmp16*tmp36;
  double tmp46 = tmp25*tmp4;
  double tmp47 = tmp41*tmp44;
  double tmp48 = tmp1*tmp24;
  double r = (tmp15*(tmp25*tmp39 - tmp25 - tmp39*tmp47 + tmp42*tmp48) + tmp16*tmp4*tmp43 + tmp26*(tmp13 + tmp36*tmp48 - 1) - tmp27*tmp36*tmp47 + tmp27*tmp43 + tmp28*tmp36 - tmp31*tmp40*tmp44*tmp45 + tmp37*tmp4*(-tmp14 + tmp46) + tmp38 + tmp45*tmp46 + 0.0067379469990854653*tmp36*tmp41*tmp8/pow(tmp22, 4))/sqrt(tmp18) + (-tmp15*tmp26 - 1.0/2.0*tmp16*(-tmp29 + tmp30*tmp31) - tmp28)*((1.0/2.0)*tmp15*(tmp29 + tmp30*tmp39 - 2) + tmp27*tmp37 + tmp38*tmp4)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_3_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp3, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = 5.0/pow(tmp9, 2);
  double tmp20 = tmp19*(2*P5 - 2*P8);
  double tmp21 = tmp11*tmp4 + tmp20*tmp7;
  double tmp22 = tmp12 + 0.0820849986238988;
  double tmp23 = tmp12/pow(tmp22, 2);
  double tmp24 = 0.082084998623898786*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp1*tmp25;
  double tmp27 = tmp16*tmp3;
  double tmp28 = tmp25*tmp27;
  double tmp29 = 2.0*tmp13;
  double tmp30 = 0.16416999724779757*tmp23;
  double tmp31 = tmp21*tmp6;
  double tmp32 = -2*P3;
  double tmp33 = P0 + P6 + tmp32;
  double tmp34 = 2*P6 + tmp32;
  double tmp35 = tmp19*tmp34;
  double tmp36 = tmp11*tmp33 + tmp35*tmp7;
  double tmp37 = tmp24*tmp36;
  double tmp38 = tmp17*tmp37;
  double tmp39 = tmp1*tmp36;
  double tmp40 = exp(10.0*tmp10*tmp7);
  double tmp41 = tmp21*tmp40;
  double tmp42 = tmp20*tmp33 + 5.0*tmp34*tmp7*(4*P5 - 4*P8)/pow(tmp9, 3) + tmp35*tmp4;
  double tmp43 = tmp24*tmp42;
  double tmp44 = 0.16416999724779757/pow(tmp22, 3);
  double tmp45 = tmp41*tmp44;
  double tmp46 = tmp17*tmp36;
  double tmp47 = tmp25*tmp6;
  double tmp48 = tmp1*tmp24;
  double r = (tmp15*(tmp25*tmp39 - tmp25 - tmp39*tmp45 + tmp42*tmp48) + tmp17*tmp43*tmp6 + tmp26*(tmp13 + tmp36*tmp48 - 1) - tmp27*tmp36*tmp45 + tmp27*tmp43 + tmp28*tmp36 - tmp31*tmp40*tmp44*tmp46 + tmp37*tmp6*(-tmp14 + tmp47) + tmp38 + tmp46*tmp47 + 0.0067379469990854653*tmp36*tmp41*tmp8/pow(tmp22, 4))/sqrt(tmp18) + (-tmp15*tmp26 - 1.0/2.0*tmp17*(-tmp29 + tmp30*tmp31) - tmp28)*((1.0/2.0)*tmp15*(tmp29 + tmp30*tmp39 - 2) + tmp27*tmp37 + tmp38*tmp6)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_4_4(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp6, 2);
  double tmp8 = tmp2 + pow(tmp4, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = tmp1*(-P0 + P3) + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp9);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp1*tmp15;
  double tmp20 = -2*P4;
  double tmp21 = P1 + P7 + tmp20;
  double tmp22 = tmp21*tmp9;
  double tmp23 = pow(tmp8, -2);
  double tmp24 = 2*P7 + tmp20;
  double tmp25 = tmp23*tmp24;
  double tmp26 = tmp12 + 0.0820849986238988;
  double tmp27 = pow(tmp26, -2);
  double tmp28 = tmp12*tmp27;
  double tmp29 = tmp28*(tmp11*tmp25 + 5.0*tmp22);
  double tmp30 = 0.082084998623898786*tmp29;
  double tmp31 = tmp19*tmp30;
  double tmp32 = tmp17*tmp6;
  double tmp33 = tmp30*tmp32;
  double tmp34 = 0.16416999724779757*tmp29;
  double tmp35 = (1.0/2.0)*tmp16*(2.0*tmp13 + tmp34*tmp4 - 2);
  double tmp36 = tmp10*tmp23;
  double tmp37 = pow(tmp22 + tmp24*tmp36, 2);
  double tmp38 = 10.0*tmp9;
  double tmp39 = exp(tmp10*tmp38);
  double tmp40 = 0.16844867497713664*tmp37*tmp39/pow(tmp26, 4);
  double tmp41 = 4.1042499311949392*tmp39/pow(tmp26, 3);
  double tmp42 = tmp37*tmp41;
  double tmp43 = 25.0*tmp37;
  double tmp44 = tmp28*(tmp11*tmp24*(-4*P4 + 4*P7)/pow(tmp8, 3) + 10.0*tmp21*tmp25 - 10.0*tmp36 - tmp38);
  double tmp45 = 0.082084998623898786*tmp44;
  double tmp46 = 0.082084998623898786*tmp4;
  double tmp47 = tmp29*tmp46 - 1;
  double r = (0.082084998623898786*tmp1*tmp12*tmp15*tmp27*tmp43 + 0.082084998623898786*tmp12*tmp17*tmp27*tmp43*tmp6 + tmp16*(0.082084998623898786*tmp12*tmp27*tmp4*tmp43 - tmp34 - tmp37*tmp4*tmp41 + tmp44*tmp46) - tmp19*tmp42 + tmp19*tmp45 + tmp2*tmp40 - tmp32*tmp42 + tmp32*tmp45 + tmp40*tmp7 + (tmp13 + tmp47)*(tmp14 + tmp47))/sqrt(tmp18) + (-tmp31 - tmp33 - tmp35)*(tmp31 + tmp33 + tmp35)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_4_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P5;
  double tmp5 = P8 + tmp4;
  double tmp6 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp5*(-P2 + P5);
  double tmp7 = pow(tmp1, 2);
  double tmp8 = pow(tmp3, 2) + pow(tmp5, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = 5.0*tmp9;
  double tmp11 = exp(tmp10*tmp6);
  double tmp12 = 1.0/(12.182493960703473*tmp11 + 1.0);
  double tmp13 = 1.0*tmp12;
  double tmp14 = P0 + tmp0 - tmp1*tmp13;
  double tmp15 = P1 - tmp13*tmp3 + tmp2;
  double tmp16 = P2 - tmp13*tmp5 + tmp4;
  double tmp17 = pow(tmp14, 2) + pow(tmp15, 2) + pow(tmp16, 2);
  double tmp18 = -2*P4;
  double tmp19 = P1 + P7 + tmp18;
  double tmp20 = 2*P7 + tmp18;
  double tmp21 = 5.0/pow(tmp8, 2);
  double tmp22 = tmp20*tmp21;
  double tmp23 = tmp10*tmp19 + tmp22*tmp6;
  double tmp24 = tmp11 + 0.0820849986238988;
  double tmp25 = tmp11/pow(tmp24, 2);
  double tmp26 = 0.082084998623898786*tmp25;
  double tmp27 = tmp23*tmp26;
  double tmp28 = tmp1*tmp14;
  double tmp29 = tmp16*tmp27;
  double tmp30 = 0.16416999724779757*tmp25;
  double tmp31 = tmp23*tmp3;
  double tmp32 = 2.0*tmp12 - 2;
  double tmp33 = -2*P5;
  double tmp34 = P2 + P8 + tmp33;
  double tmp35 = tmp21*(2*P8 + tmp33);
  double tmp36 = tmp10*tmp34 + tmp35*tmp6;
  double tmp37 = tmp26*tmp36;
  double tmp38 = tmp28*tmp37;
  double tmp39 = tmp3*tmp37;
  double tmp40 = tmp36*tmp5;
  double tmp41 = exp(10.0*tmp6*tmp9);
  double tmp42 = tmp36*tmp41;
  double tmp43 = tmp19*tmp35 + 5.0*tmp20*tmp6*(-4*P5 + 4*P8)/pow(tmp8, 3) + tmp22*tmp34;
  double tmp44 = tmp26*tmp43;
  double tmp45 = 0.16416999724779757/pow(tmp24, 3);
  double tmp46 = tmp42*tmp45;
  double tmp47 = tmp16*tmp23;
  double tmp48 = tmp37*tmp5;
  double tmp49 = tmp26*tmp3;
  double r = (tmp15*(tmp31*tmp37 - tmp31*tmp46 - tmp37 + tmp43*tmp49) + tmp16*tmp44*tmp5 - tmp23*tmp28*tmp46 + tmp23*tmp38 + 0.0067379469990854653*tmp23*tmp42*tmp7/pow(tmp24, 4) + tmp27*tmp5*(tmp13 + tmp48 - 1) + tmp28*tmp44 - tmp29 + tmp39*(tmp12 + tmp23*tmp49 - 1) - tmp40*tmp41*tmp45*tmp47 + tmp47*tmp48)/sqrt(tmp17) + (-tmp15*tmp39 - 1.0/2.0*tmp16*(tmp30*tmp40 + tmp32) - tmp38)*((1.0/2.0)*tmp15*(tmp30*tmp31 + tmp32) + tmp27*tmp28 + tmp29*tmp5)/pow(tmp17, 3.0/2.0);
  return r;
}
double d2DdP2_4_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp6, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp4, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = 5.0/pow(tmp9, 2);
  double tmp20 = tmp19*(2*P3 - 2*P6);
  double tmp21 = tmp11*tmp2 + tmp20*tmp7;
  double tmp22 = tmp12 + 0.0820849986238988;
  double tmp23 = tmp12/pow(tmp22, 2);
  double tmp24 = 0.082084998623898786*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp25*tmp4;
  double tmp27 = tmp17*tmp6;
  double tmp28 = tmp25*tmp27;
  double tmp29 = 2.0*tmp13;
  double tmp30 = 0.16416999724779757*tmp23;
  double tmp31 = tmp1*tmp21;
  double tmp32 = -2*P4;
  double tmp33 = P1 + P7 + tmp32;
  double tmp34 = 2*P7 + tmp32;
  double tmp35 = tmp19*tmp34;
  double tmp36 = tmp11*tmp33 + tmp35*tmp7;
  double tmp37 = tmp24*tmp36;
  double tmp38 = tmp15*tmp37;
  double tmp39 = tmp36*tmp4;
  double tmp40 = exp(10.0*tmp10*tmp7);
  double tmp41 = tmp21*tmp40;
  double tmp42 = tmp2*tmp35 + tmp20*tmp33 + 5.0*tmp34*tmp7*(4*P3 - 4*P6)/pow(tmp9, 3);
  double tmp43 = tmp24*tmp42;
  double tmp44 = 0.16416999724779757/pow(tmp22, 3);
  double tmp45 = tmp15*tmp36;
  double tmp46 = tmp1*tmp25;
  double tmp47 = tmp41*tmp44;
  double tmp48 = tmp24*tmp4;
  double r = (tmp1*tmp15*tmp43 + tmp1*tmp37*(-tmp14 + tmp46) + tmp16*(tmp25*tmp39 - tmp25 - tmp39*tmp47 + tmp42*tmp48) + tmp26*(tmp13 + tmp36*tmp48 - 1) - tmp27*tmp36*tmp47 + tmp27*tmp43 + tmp28*tmp36 - tmp31*tmp40*tmp44*tmp45 + tmp38 + tmp45*tmp46 + 0.0067379469990854653*tmp36*tmp41*tmp8/pow(tmp22, 4))/sqrt(tmp18) + (tmp1*tmp38 + (1.0/2.0)*tmp16*(tmp29 + tmp30*tmp39 - 2) + tmp27*tmp37)*(-1.0/2.0*tmp15*(-tmp29 + tmp30*tmp31) - tmp16*tmp26 - tmp28)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_4_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp6, 2);
  double tmp10 = pow(tmp4, 2) + tmp8 + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp7);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = 2*P4;
  double tmp21 = 2*P7;
  double tmp22 = tmp20 - tmp21;
  double tmp23 = pow(tmp10, -2);
  double tmp24 = 5.0*tmp23;
  double tmp25 = tmp24*tmp7;
  double tmp26 = tmp12*tmp2 + tmp22*tmp25;
  double tmp27 = tmp13 + 0.0820849986238988;
  double tmp28 = tmp13/pow(tmp27, 2);
  double tmp29 = 0.082084998623898786*tmp28;
  double tmp30 = tmp26*tmp29;
  double tmp31 = tmp1*tmp16;
  double tmp32 = tmp18*tmp6;
  double tmp33 = 2.0*tmp14;
  double tmp34 = tmp28*tmp4;
  double tmp35 = (1.0/2.0)*tmp17;
  double tmp36 = -tmp20;
  double tmp37 = P1 + P7 + tmp36;
  double tmp38 = tmp21 + tmp36;
  double tmp39 = tmp12*tmp37 + tmp25*tmp38;
  double tmp40 = tmp29*tmp39;
  double tmp41 = tmp31*tmp40;
  double tmp42 = tmp32*tmp40;
  double tmp43 = 0.16416999724779757*tmp39;
  double tmp44 = 10.0*tmp7;
  double tmp45 = tmp26*exp(tmp11*tmp44);
  double tmp46 = 0.0067379469990854653*tmp39*tmp45/pow(tmp27, 4);
  double tmp47 = tmp43*tmp45/pow(tmp27, 3);
  double tmp48 = tmp29*(tmp12 + tmp2*tmp24*tmp38 + tmp22*tmp24*tmp37 + tmp23*tmp44 + 5.0*tmp38*tmp7*(4*P4 - 4*P7)/pow(tmp10, 3));
  double tmp49 = tmp4*tmp40;
  double r = (tmp17*(tmp26*tmp49 - tmp30 - tmp4*tmp47 + tmp4*tmp48 + tmp40) + tmp26*tmp41 + tmp26*tmp42 - tmp31*tmp47 + tmp31*tmp48 - tmp32*tmp47 + tmp32*tmp48 + tmp46*tmp8 + tmp46*tmp9 + (-tmp15 + tmp30*tmp4)*(tmp14 + tmp49 - 1))/sqrt(tmp19) + (-tmp30*tmp31 - tmp30*tmp32 - tmp35*(0.16416999724779757*tmp26*tmp34 - tmp33))*(tmp35*(tmp33 + tmp34*tmp43 - 2) + tmp41 + tmp42)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_4_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp3, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp3 + tmp2;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = 5.0/pow(tmp9, 2);
  double tmp20 = tmp19*(2*P5 - 2*P8);
  double tmp21 = tmp11*tmp4 + tmp20*tmp7;
  double tmp22 = tmp12 + 0.0820849986238988;
  double tmp23 = tmp12/pow(tmp22, 2);
  double tmp24 = 0.082084998623898786*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp1*tmp15;
  double tmp27 = tmp25*tmp26;
  double tmp28 = tmp25*tmp3;
  double tmp29 = 2.0*tmp13;
  double tmp30 = 0.16416999724779757*tmp23;
  double tmp31 = tmp21*tmp6;
  double tmp32 = -2*P4;
  double tmp33 = P1 + P7 + tmp32;
  double tmp34 = 2*P7 + tmp32;
  double tmp35 = tmp19*tmp34;
  double tmp36 = tmp11*tmp33 + tmp35*tmp7;
  double tmp37 = tmp24*tmp36;
  double tmp38 = tmp17*tmp37;
  double tmp39 = tmp3*tmp36;
  double tmp40 = exp(10.0*tmp10*tmp7);
  double tmp41 = tmp21*tmp40;
  double tmp42 = tmp20*tmp33 + 5.0*tmp34*tmp7*(4*P5 - 4*P8)/pow(tmp9, 3) + tmp35*tmp4;
  double tmp43 = tmp24*tmp42;
  double tmp44 = 0.16416999724779757/pow(tmp22, 3);
  double tmp45 = tmp41*tmp44;
  double tmp46 = tmp17*tmp36;
  double tmp47 = tmp25*tmp6;
  double tmp48 = tmp24*tmp3;
  double r = (tmp16*(tmp25*tmp39 - tmp25 - tmp39*tmp45 + tmp42*tmp48) + tmp17*tmp43*tmp6 - tmp26*tmp36*tmp45 + tmp26*tmp43 + tmp27*tmp36 + tmp28*(tmp13 + tmp36*tmp48 - 1) - tmp31*tmp40*tmp44*tmp46 + tmp37*tmp6*(-tmp14 + tmp47) + tmp38 + tmp46*tmp47 + 0.0067379469990854653*tmp36*tmp41*tmp8/pow(tmp22, 4))/sqrt(tmp18) + (-tmp16*tmp28 - 1.0/2.0*tmp17*(-tmp29 + tmp30*tmp31) - tmp27)*((1.0/2.0)*tmp16*(tmp29 + tmp30*tmp39 - 2) + tmp26*tmp37 + tmp38*tmp6)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_5_5(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = pow(tmp4, 2);
  double tmp6 = -P5;
  double tmp7 = P8 + tmp6;
  double tmp8 = tmp2 + tmp5 + pow(tmp7, 2);
  double tmp9 = 1.0/tmp8;
  double tmp10 = tmp1*(-P0 + P3) + tmp4*(-P1 + P4) + tmp7*(-P2 + P5);
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp9);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp7 + tmp6;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = tmp1*tmp15;
  double tmp20 = -2*P5;
  double tmp21 = P2 + P8 + tmp20;
  double tmp22 = tmp21*tmp9;
  double tmp23 = pow(tmp8, -2);
  double tmp24 = 2*P8 + tmp20;
  double tmp25 = tmp23*tmp24;
  double tmp26 = tmp12 + 0.0820849986238988;
  double tmp27 = pow(tmp26, -2);
  double tmp28 = tmp12*tmp27;
  double tmp29 = tmp28*(tmp11*tmp25 + 5.0*tmp22);
  double tmp30 = 0.082084998623898786*tmp29;
  double tmp31 = tmp19*tmp30;
  double tmp32 = tmp16*tmp4;
  double tmp33 = tmp30*tmp32;
  double tmp34 = 0.16416999724779757*tmp29;
  double tmp35 = (1.0/2.0)*tmp17*(2.0*tmp13 + tmp34*tmp7 - 2);
  double tmp36 = tmp10*tmp23;
  double tmp37 = pow(tmp22 + tmp24*tmp36, 2);
  double tmp38 = 10.0*tmp9;
  double tmp39 = exp(tmp10*tmp38);
  double tmp40 = 0.16844867497713664*tmp37*tmp39/pow(tmp26, 4);
  double tmp41 = 4.1042499311949392*tmp39/pow(tmp26, 3);
  double tmp42 = tmp37*tmp41;
  double tmp43 = 25.0*tmp37;
  double tmp44 = tmp28*(tmp11*tmp24*(-4*P5 + 4*P8)/pow(tmp8, 3) + 10.0*tmp21*tmp25 - 10.0*tmp36 - tmp38);
  double tmp45 = 0.082084998623898786*tmp44;
  double tmp46 = 0.082084998623898786*tmp7;
  double tmp47 = tmp29*tmp46 - 1;
  double r = (0.082084998623898786*tmp1*tmp12*tmp15*tmp27*tmp43 + 0.082084998623898786*tmp12*tmp16*tmp27*tmp4*tmp43 + tmp17*(0.082084998623898786*tmp12*tmp27*tmp43*tmp7 - tmp34 - tmp37*tmp41*tmp7 + tmp44*tmp46) - tmp19*tmp42 + tmp19*tmp45 + tmp2*tmp40 - tmp32*tmp42 + tmp32*tmp45 + tmp40*tmp5 + (tmp13 + tmp47)*(tmp14 + tmp47))/sqrt(tmp18) + (-tmp31 - tmp33 - tmp35)*(tmp31 + tmp33 + tmp35)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_5_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp4, 2);
  double tmp9 = pow(tmp1, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = 5.0/pow(tmp9, 2);
  double tmp20 = tmp19*(2*P3 - 2*P6);
  double tmp21 = tmp11*tmp2 + tmp20*tmp7;
  double tmp22 = tmp12 + 0.0820849986238988;
  double tmp23 = tmp12/pow(tmp22, 2);
  double tmp24 = 0.082084998623898786*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp16*tmp4;
  double tmp27 = tmp25*tmp26;
  double tmp28 = tmp25*tmp6;
  double tmp29 = 2.0*tmp13;
  double tmp30 = 0.16416999724779757*tmp23;
  double tmp31 = tmp1*tmp21;
  double tmp32 = -2*P5;
  double tmp33 = P2 + P8 + tmp32;
  double tmp34 = 2*P8 + tmp32;
  double tmp35 = tmp19*tmp34;
  double tmp36 = tmp11*tmp33 + tmp35*tmp7;
  double tmp37 = tmp24*tmp36;
  double tmp38 = tmp15*tmp37;
  double tmp39 = tmp36*tmp6;
  double tmp40 = exp(10.0*tmp10*tmp7);
  double tmp41 = tmp21*tmp40;
  double tmp42 = tmp2*tmp35 + tmp20*tmp33 + 5.0*tmp34*tmp7*(4*P3 - 4*P6)/pow(tmp9, 3);
  double tmp43 = tmp24*tmp42;
  double tmp44 = 0.16416999724779757/pow(tmp22, 3);
  double tmp45 = tmp15*tmp36;
  double tmp46 = tmp1*tmp25;
  double tmp47 = tmp41*tmp44;
  double tmp48 = tmp24*tmp6;
  double r = (tmp1*tmp15*tmp43 + tmp1*tmp37*(-tmp14 + tmp46) + tmp17*(tmp25*tmp39 - tmp25 - tmp39*tmp47 + tmp42*tmp48) - tmp26*tmp36*tmp47 + tmp26*tmp43 + tmp27*tmp36 + tmp28*(tmp13 + tmp36*tmp48 - 1) - tmp31*tmp40*tmp44*tmp45 + tmp38 + tmp45*tmp46 + 0.0067379469990854653*tmp36*tmp41*tmp8/pow(tmp22, 4))/sqrt(tmp18) + (tmp1*tmp38 + (1.0/2.0)*tmp17*(tmp29 + tmp30*tmp39 - 2) + tmp26*tmp37)*(-1.0/2.0*tmp15*(-tmp29 + tmp30*tmp31) - tmp17*tmp28 - tmp27)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_5_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp6*(-P2 + P5);
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp4, 2) + pow(tmp6, 2) + tmp8;
  double tmp10 = 1.0/tmp9;
  double tmp11 = 5.0*tmp10;
  double tmp12 = exp(tmp11*tmp7);
  double tmp13 = 1.0/(12.182493960703473*tmp12 + 1.0);
  double tmp14 = 1.0*tmp13;
  double tmp15 = P0 + tmp0 - tmp1*tmp14;
  double tmp16 = P1 - tmp14*tmp4 + tmp3;
  double tmp17 = P2 - tmp14*tmp6 + tmp5;
  double tmp18 = pow(tmp15, 2) + pow(tmp16, 2) + pow(tmp17, 2);
  double tmp19 = 5.0/pow(tmp9, 2);
  double tmp20 = tmp19*(2*P4 - 2*P7);
  double tmp21 = tmp11*tmp2 + tmp20*tmp7;
  double tmp22 = tmp12 + 0.0820849986238988;
  double tmp23 = tmp12/pow(tmp22, 2);
  double tmp24 = 0.082084998623898786*tmp23;
  double tmp25 = tmp21*tmp24;
  double tmp26 = tmp1*tmp15;
  double tmp27 = tmp25*tmp26;
  double tmp28 = tmp25*tmp6;
  double tmp29 = 2.0*tmp13;
  double tmp30 = 0.16416999724779757*tmp23;
  double tmp31 = tmp21*tmp4;
  double tmp32 = -2*P5;
  double tmp33 = P2 + P8 + tmp32;
  double tmp34 = 2*P8 + tmp32;
  double tmp35 = tmp19*tmp34;
  double tmp36 = tmp11*tmp33 + tmp35*tmp7;
  double tmp37 = tmp24*tmp36;
  double tmp38 = tmp16*tmp37;
  double tmp39 = tmp36*tmp6;
  double tmp40 = exp(10.0*tmp10*tmp7);
  double tmp41 = tmp21*tmp40;
  double tmp42 = tmp2*tmp35 + tmp20*tmp33 + 5.0*tmp34*tmp7*(4*P4 - 4*P7)/pow(tmp9, 3);
  double tmp43 = tmp24*tmp42;
  double tmp44 = 0.16416999724779757/pow(tmp22, 3);
  double tmp45 = tmp41*tmp44;
  double tmp46 = tmp16*tmp36;
  double tmp47 = tmp25*tmp4;
  double tmp48 = tmp24*tmp6;
  double r = (tmp16*tmp4*tmp43 + tmp17*(tmp25*tmp39 - tmp25 - tmp39*tmp45 + tmp42*tmp48) - tmp26*tmp36*tmp45 + tmp26*tmp43 + tmp27*tmp36 + tmp28*(tmp13 + tmp36*tmp48 - 1) - tmp31*tmp40*tmp44*tmp46 + tmp37*tmp4*(-tmp14 + tmp47) + tmp38 + tmp46*tmp47 + 0.0067379469990854653*tmp36*tmp41*tmp8/pow(tmp22, 4))/sqrt(tmp18) + (-1.0/2.0*tmp16*(-tmp29 + tmp30*tmp31) - tmp17*tmp28 - tmp27)*((1.0/2.0)*tmp17*(tmp29 + tmp30*tmp39 - 2) + tmp26*tmp37 + tmp38*tmp4)/pow(tmp18, 3.0/2.0);
  return r;
}
double d2DdP2_5_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = -P2 + P5;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = tmp1*(-P0 + P3) + tmp3*(-P1 + P4) + tmp4*tmp6;
  double tmp8 = pow(tmp1, 2);
  double tmp9 = pow(tmp3, 2);
  double tmp10 = pow(tmp6, 2) + tmp8 + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp7);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp3 + tmp2;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = 2*P5;
  double tmp21 = 2*P8;
  double tmp22 = tmp20 - tmp21;
  double tmp23 = pow(tmp10, -2);
  double tmp24 = 5.0*tmp23;
  double tmp25 = tmp24*tmp7;
  double tmp26 = tmp12*tmp4 + tmp22*tmp25;
  double tmp27 = tmp13 + 0.0820849986238988;
  double tmp28 = tmp13/pow(tmp27, 2);
  double tmp29 = 0.082084998623898786*tmp28;
  double tmp30 = tmp26*tmp29;
  double tmp31 = tmp1*tmp16;
  double tmp32 = tmp17*tmp3;
  double tmp33 = 2.0*tmp14;
  double tmp34 = tmp28*tmp6;
  double tmp35 = (1.0/2.0)*tmp18;
  double tmp36 = -tmp20;
  double tmp37 = P2 + P8 + tmp36;
  double tmp38 = tmp21 + tmp36;
  double tmp39 = tmp12*tmp37 + tmp25*tmp38;
  double tmp40 = tmp29*tmp39;
  double tmp41 = tmp31*tmp40;
  double tmp42 = tmp32*tmp40;
  double tmp43 = 0.16416999724779757*tmp39;
  double tmp44 = 10.0*tmp7;
  double tmp45 = tmp26*exp(tmp11*tmp44);
  double tmp46 = 0.0067379469990854653*tmp39*tmp45/pow(tmp27, 4);
  double tmp47 = tmp43*tmp45/pow(tmp27, 3);
  double tmp48 = tmp29*(tmp12 + tmp22*tmp24*tmp37 + tmp23*tmp44 + tmp24*tmp38*tmp4 + 5.0*tmp38*tmp7*(4*P5 - 4*P8)/pow(tmp10, 3));
  double tmp49 = tmp40*tmp6;
  double r = (tmp18*(tmp26*tmp49 - tmp30 + tmp40 - tmp47*tmp6 + tmp48*tmp6) + tmp26*tmp41 + tmp26*tmp42 - tmp31*tmp47 + tmp31*tmp48 - tmp32*tmp47 + tmp32*tmp48 + tmp46*tmp8 + tmp46*tmp9 + (-tmp15 + tmp30*tmp6)*(tmp14 + tmp49 - 1))/sqrt(tmp19) + (-tmp30*tmp31 - tmp30*tmp32 - tmp35*(0.16416999724779757*tmp26*tmp34 - tmp33))*(tmp35*(tmp33 + tmp34*tmp43 - 2) + tmp41 + tmp42)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_6_6(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P4;
  double tmp3 = P7 + tmp2;
  double tmp4 = pow(tmp3, 2);
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp6, 2);
  double tmp8 = pow(tmp1, 2) + tmp4 + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = -P0 + P3;
  double tmp11 = tmp1*tmp10 + tmp3*(-P1 + P4) + tmp6*(-P2 + P5);
  double tmp12 = tmp11*tmp9;
  double tmp13 = exp(5.0*tmp12);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp3 + tmp2;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = tmp17*tmp3;
  double tmp21 = tmp10*tmp9;
  double tmp22 = 2*P3 - 2*P6;
  double tmp23 = pow(tmp8, -2);
  double tmp24 = tmp11*tmp23;
  double tmp25 = tmp22*tmp24;
  double tmp26 = tmp13 + 0.0820849986238988;
  double tmp27 = pow(tmp26, -2);
  double tmp28 = tmp13*tmp27;
  double tmp29 = tmp28*(5.0*tmp21 + 5.0*tmp25);
  double tmp30 = 0.082084998623898786*tmp29;
  double tmp31 = tmp20*tmp30;
  double tmp32 = tmp18*tmp6;
  double tmp33 = tmp30*tmp32;
  double tmp34 = 0.16416999724779757*tmp29;
  double tmp35 = (1.0/2.0)*tmp16*(tmp1*tmp34 - 2.0*tmp14);
  double tmp36 = pow(tmp21 + tmp25, 2);
  double tmp37 = exp(10.0*tmp12);
  double tmp38 = 0.16844867497713664*tmp36*tmp37/pow(tmp26, 4);
  double tmp39 = 0.082084998623898786*tmp1;
  double tmp40 = 4.1042499311949392*tmp37/pow(tmp26, 3);
  double tmp41 = tmp36*tmp40;
  double tmp42 = 25.0*tmp36;
  double tmp43 = tmp28*(10.0*tmp10*tmp22*tmp23 + 5.0*tmp11*tmp22*(4*P3 - 4*P6)/pow(tmp8, 3) - 10.0*tmp24);
  double tmp44 = 0.082084998623898786*tmp43;
  double r = (0.082084998623898786*tmp13*tmp17*tmp27*tmp3*tmp42 + 0.082084998623898786*tmp13*tmp18*tmp27*tmp42*tmp6 + tmp16*(0.082084998623898786*tmp1*tmp13*tmp27*tmp42 - tmp1*tmp36*tmp40 + tmp34 + tmp39*tmp43) - tmp20*tmp41 + tmp20*tmp44 - tmp32*tmp41 + tmp32*tmp44 + tmp38*tmp4 + tmp38*tmp7 + pow(-tmp15 + tmp29*tmp39, 2))/sqrt(tmp19) + (-tmp31 - tmp33 - tmp35)*(tmp31 + tmp33 + tmp35)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_6_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P1 + P4;
  double tmp4 = -P4;
  double tmp5 = P7 + tmp4;
  double tmp6 = -P5;
  double tmp7 = P8 + tmp6;
  double tmp8 = tmp1*tmp2 + tmp3*tmp5 + tmp7*(-P2 + P5);
  double tmp9 = pow(tmp7, 2);
  double tmp10 = pow(tmp1, 2) + pow(tmp5, 2) + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp8);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp5 + tmp4;
  double tmp18 = P2 - tmp15*tmp7 + tmp6;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = 5.0/pow(tmp10, 2);
  double tmp21 = tmp20*(2*P4 - 2*P7);
  double tmp22 = tmp12*tmp3 + tmp21*tmp8;
  double tmp23 = tmp13 + 0.0820849986238988;
  double tmp24 = tmp13/pow(tmp23, 2);
  double tmp25 = 0.082084998623898786*tmp24;
  double tmp26 = tmp22*tmp25;
  double tmp27 = tmp1*tmp26;
  double tmp28 = tmp18*tmp7;
  double tmp29 = tmp26*tmp28;
  double tmp30 = -2.0*tmp14;
  double tmp31 = 0.16416999724779757*tmp24;
  double tmp32 = tmp22*tmp5;
  double tmp33 = 2*P3 - 2*P6;
  double tmp34 = tmp20*tmp33;
  double tmp35 = tmp12*tmp2 + tmp34*tmp8;
  double tmp36 = tmp25*tmp35;
  double tmp37 = tmp17*tmp36;
  double tmp38 = tmp1*tmp35;
  double tmp39 = exp(10.0*tmp11*tmp8);
  double tmp40 = tmp22*tmp39;
  double tmp41 = tmp2*tmp21 + tmp3*tmp34 + 5.0*tmp33*tmp8*(4*P4 - 4*P7)/pow(tmp10, 3);
  double tmp42 = tmp25*tmp41;
  double tmp43 = 0.16416999724779757/pow(tmp23, 3);
  double tmp44 = tmp17*tmp35;
  double tmp45 = tmp26*tmp5;
  double tmp46 = tmp40*tmp43;
  double tmp47 = -tmp15;
  double tmp48 = tmp1*tmp25;
  double r = (tmp16*(tmp26*tmp38 + tmp26 - tmp38*tmp46 + tmp41*tmp48) + tmp17*tmp42*tmp5 + tmp27*(tmp35*tmp48 + tmp47) - tmp28*tmp35*tmp46 + tmp28*tmp42 + tmp29*tmp35 - tmp32*tmp39*tmp43*tmp44 + tmp36*tmp5*(tmp45 + tmp47) + tmp37 + tmp44*tmp45 + 0.0067379469990854653*tmp35*tmp40*tmp9/pow(tmp23, 4))/sqrt(tmp19) + (-tmp16*tmp27 - 1.0/2.0*tmp17*(tmp30 + tmp31*tmp32) - tmp29)*((1.0/2.0)*tmp16*(tmp30 + tmp31*tmp38) + tmp28*tmp36 + tmp37*tmp5)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_6_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P0 + P3;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P2 + P5;
  double tmp6 = -P5;
  double tmp7 = P8 + tmp6;
  double tmp8 = tmp1*tmp2 + tmp4*(-P1 + P4) + tmp5*tmp7;
  double tmp9 = pow(tmp4, 2);
  double tmp10 = pow(tmp1, 2) + pow(tmp7, 2) + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp8);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp7 + tmp6;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = 5.0/pow(tmp10, 2);
  double tmp21 = tmp20*(2*P5 - 2*P8);
  double tmp22 = tmp12*tmp5 + tmp21*tmp8;
  double tmp23 = tmp13 + 0.0820849986238988;
  double tmp24 = tmp13/pow(tmp23, 2);
  double tmp25 = 0.082084998623898786*tmp24;
  double tmp26 = tmp22*tmp25;
  double tmp27 = tmp1*tmp26;
  double tmp28 = tmp17*tmp4;
  double tmp29 = tmp26*tmp28;
  double tmp30 = -2.0*tmp14;
  double tmp31 = 0.16416999724779757*tmp24;
  double tmp32 = tmp22*tmp7;
  double tmp33 = 2*P3 - 2*P6;
  double tmp34 = tmp20*tmp33;
  double tmp35 = tmp12*tmp2 + tmp34*tmp8;
  double tmp36 = tmp25*tmp35;
  double tmp37 = tmp18*tmp36;
  double tmp38 = tmp1*tmp35;
  double tmp39 = exp(10.0*tmp11*tmp8);
  double tmp40 = tmp22*tmp39;
  double tmp41 = tmp2*tmp21 + tmp34*tmp5 + 5.0*tmp33*tmp8*(4*P5 - 4*P8)/pow(tmp10, 3);
  double tmp42 = tmp25*tmp41;
  double tmp43 = 0.16416999724779757/pow(tmp23, 3);
  double tmp44 = tmp40*tmp43;
  double tmp45 = tmp18*tmp35;
  double tmp46 = tmp26*tmp7;
  double tmp47 = -tmp15;
  double tmp48 = tmp1*tmp25;
  double r = (tmp16*(tmp26*tmp38 + tmp26 - tmp38*tmp44 + tmp41*tmp48) + tmp18*tmp42*tmp7 + tmp27*(tmp35*tmp48 + tmp47) - tmp28*tmp35*tmp44 + tmp28*tmp42 + tmp29*tmp35 - tmp32*tmp39*tmp43*tmp45 + tmp36*tmp7*(tmp46 + tmp47) + tmp37 + tmp45*tmp46 + 0.0067379469990854653*tmp35*tmp40*tmp9/pow(tmp23, 4))/sqrt(tmp19) + (-tmp16*tmp27 - 1.0/2.0*tmp18*(tmp30 + tmp31*tmp32) - tmp29)*((1.0/2.0)*tmp16*(tmp30 + tmp31*tmp38) + tmp28*tmp36 + tmp37*tmp7)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_7_7(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P5;
  double tmp6 = P8 + tmp5;
  double tmp7 = pow(tmp6, 2);
  double tmp8 = tmp2 + pow(tmp4, 2) + tmp7;
  double tmp9 = 1.0/tmp8;
  double tmp10 = -P1 + P4;
  double tmp11 = tmp1*(-P0 + P3) + tmp10*tmp4 + tmp6*(-P2 + P5);
  double tmp12 = tmp11*tmp9;
  double tmp13 = exp(5.0*tmp12);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp6 + tmp5;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = tmp1*tmp16;
  double tmp21 = tmp10*tmp9;
  double tmp22 = 2*P4 - 2*P7;
  double tmp23 = pow(tmp8, -2);
  double tmp24 = tmp11*tmp23;
  double tmp25 = tmp22*tmp24;
  double tmp26 = tmp13 + 0.0820849986238988;
  double tmp27 = pow(tmp26, -2);
  double tmp28 = tmp13*tmp27;
  double tmp29 = tmp28*(5.0*tmp21 + 5.0*tmp25);
  double tmp30 = 0.082084998623898786*tmp29;
  double tmp31 = tmp20*tmp30;
  double tmp32 = tmp18*tmp6;
  double tmp33 = tmp30*tmp32;
  double tmp34 = 0.16416999724779757*tmp29;
  double tmp35 = (1.0/2.0)*tmp17*(-2.0*tmp14 + tmp34*tmp4);
  double tmp36 = pow(tmp21 + tmp25, 2);
  double tmp37 = exp(10.0*tmp12);
  double tmp38 = 0.16844867497713664*tmp36*tmp37/pow(tmp26, 4);
  double tmp39 = 0.082084998623898786*tmp4;
  double tmp40 = 4.1042499311949392*tmp37/pow(tmp26, 3);
  double tmp41 = tmp36*tmp40;
  double tmp42 = 25.0*tmp36;
  double tmp43 = tmp28*(10.0*tmp10*tmp22*tmp23 + 5.0*tmp11*tmp22*(4*P4 - 4*P7)/pow(tmp8, 3) - 10.0*tmp24);
  double tmp44 = 0.082084998623898786*tmp43;
  double r = (0.082084998623898786*tmp1*tmp13*tmp16*tmp27*tmp42 + 0.082084998623898786*tmp13*tmp18*tmp27*tmp42*tmp6 + tmp17*(0.082084998623898786*tmp13*tmp27*tmp4*tmp42 + tmp34 - tmp36*tmp4*tmp40 + tmp39*tmp43) + tmp2*tmp38 - tmp20*tmp41 + tmp20*tmp44 - tmp32*tmp41 + tmp32*tmp44 + tmp38*tmp7 + pow(-tmp15 + tmp29*tmp39, 2))/sqrt(tmp19) + (-tmp31 - tmp33 - tmp35)*(tmp31 + tmp33 + tmp35)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_7_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = -P1 + P4;
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = -P2 + P5;
  double tmp6 = -P5;
  double tmp7 = P8 + tmp6;
  double tmp8 = tmp1*(-P0 + P3) + tmp2*tmp4 + tmp5*tmp7;
  double tmp9 = pow(tmp1, 2);
  double tmp10 = pow(tmp4, 2) + pow(tmp7, 2) + tmp9;
  double tmp11 = 1.0/tmp10;
  double tmp12 = 5.0*tmp11;
  double tmp13 = exp(tmp12*tmp8);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp7 + tmp6;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = 2*P4 - 2*P7;
  double tmp21 = 5.0/pow(tmp10, 2);
  double tmp22 = tmp20*tmp21;
  double tmp23 = tmp12*tmp2 + tmp22*tmp8;
  double tmp24 = tmp13 + 0.0820849986238988;
  double tmp25 = tmp13/pow(tmp24, 2);
  double tmp26 = 0.082084998623898786*tmp25;
  double tmp27 = tmp23*tmp26;
  double tmp28 = tmp1*tmp16;
  double tmp29 = tmp18*tmp27;
  double tmp30 = -2.0*tmp14;
  double tmp31 = 0.16416999724779757*tmp25;
  double tmp32 = tmp23*tmp4;
  double tmp33 = tmp21*(2*P5 - 2*P8);
  double tmp34 = tmp12*tmp5 + tmp33*tmp8;
  double tmp35 = tmp26*tmp34;
  double tmp36 = tmp28*tmp35;
  double tmp37 = tmp35*tmp4;
  double tmp38 = tmp34*tmp7;
  double tmp39 = exp(10.0*tmp11*tmp8);
  double tmp40 = tmp34*tmp39;
  double tmp41 = tmp2*tmp33 + tmp22*tmp5 + 5.0*tmp20*tmp8*(4*P5 - 4*P8)/pow(tmp10, 3);
  double tmp42 = tmp26*tmp41;
  double tmp43 = 0.16416999724779757/pow(tmp24, 3);
  double tmp44 = tmp40*tmp43;
  double tmp45 = tmp18*tmp23;
  double tmp46 = tmp35*tmp7;
  double tmp47 = -tmp15;
  double tmp48 = tmp26*tmp4;
  double r = (tmp17*(tmp32*tmp35 - tmp32*tmp44 + tmp35 + tmp41*tmp48) + tmp18*tmp42*tmp7 - tmp23*tmp28*tmp44 + tmp23*tmp36 + 0.0067379469990854653*tmp23*tmp40*tmp9/pow(tmp24, 4) + tmp27*tmp7*(tmp46 + tmp47) + tmp28*tmp42 + tmp29 + tmp37*(tmp23*tmp48 + tmp47) - tmp38*tmp39*tmp43*tmp45 + tmp45*tmp46)/sqrt(tmp19) + (-tmp17*tmp37 - 1.0/2.0*tmp18*(tmp30 + tmp31*tmp38) - tmp36)*((1.0/2.0)*tmp17*(tmp30 + tmp31*tmp32) + tmp27*tmp28 + tmp29*tmp7)/pow(tmp19, 3.0/2.0);
  return r;
}
double d2DdP2_8_8(const double& P0, const double& P1, const double& P2, const double& P3, const double& P4, const double& P5, const double& P6, const double& P7, const double& P8, const double& props0, const double& props1) {
  double tmp0 = -P3;
  double tmp1 = P6 + tmp0;
  double tmp2 = pow(tmp1, 2);
  double tmp3 = -P4;
  double tmp4 = P7 + tmp3;
  double tmp5 = pow(tmp4, 2);
  double tmp6 = -P5;
  double tmp7 = P8 + tmp6;
  double tmp8 = tmp2 + tmp5 + pow(tmp7, 2);
  double tmp9 = 1.0/tmp8;
  double tmp10 = -P2 + P5;
  double tmp11 = tmp1*(-P0 + P3) + tmp10*tmp7 + tmp4*(-P1 + P4);
  double tmp12 = tmp11*tmp9;
  double tmp13 = exp(5.0*tmp12);
  double tmp14 = 1.0/(12.182493960703473*tmp13 + 1.0);
  double tmp15 = 1.0*tmp14;
  double tmp16 = P0 + tmp0 - tmp1*tmp15;
  double tmp17 = P1 - tmp15*tmp4 + tmp3;
  double tmp18 = P2 - tmp15*tmp7 + tmp6;
  double tmp19 = pow(tmp16, 2) + pow(tmp17, 2) + pow(tmp18, 2);
  double tmp20 = tmp1*tmp16;
  double tmp21 = tmp10*tmp9;
  double tmp22 = 2*P5 - 2*P8;
  double tmp23 = pow(tmp8, -2);
  double tmp24 = tmp11*tmp23;
  double tmp25 = tmp22*tmp24;
  double tmp26 = tmp13 + 0.0820849986238988;
  double tmp27 = pow(tmp26, -2);
  double tmp28 = tmp13*tmp27;
  double tmp29 = tmp28*(5.0*tmp21 + 5.0*tmp25);
  double tmp30 = 0.082084998623898786*tmp29;
  double tmp31 = tmp20*tmp30;
  double tmp32 = tmp17*tmp4;
  double tmp33 = tmp30*tmp32;
  double tmp34 = 0.16416999724779757*tmp29;
  double tmp35 = (1.0/2.0)*tmp18*(-2.0*tmp14 + tmp34*tmp7);
  double tmp36 = pow(tmp21 + tmp25, 2);
  double tmp37 = exp(10.0*tmp12);
  double tmp38 = 0.16844867497713664*tmp36*tmp37/pow(tmp26, 4);
  double tmp39 = 0.082084998623898786*tmp7;
  double tmp40 = 4.1042499311949392*tmp37/pow(tmp26, 3);
  double tmp41 = tmp36*tmp40;
  double tmp42 = 25.0*tmp36;
  double tmp43 = tmp28*(10.0*tmp10*tmp22*tmp23 + 5.0*tmp11*tmp22*(4*P5 - 4*P8)/pow(tmp8, 3) - 10.0*tmp24);
  double tmp44 = 0.082084998623898786*tmp43;
  double r = (0.082084998623898786*tmp1*tmp13*tmp16*tmp27*tmp42 + 0.082084998623898786*tmp13*tmp17*tmp27*tmp4*tmp42 + tmp18*(0.082084998623898786*tmp13*tmp27*tmp42*tmp7 + tmp34 - tmp36*tmp40*tmp7 + tmp39*tmp43) + tmp2*tmp38 - tmp20*tmp41 + tmp20*tmp44 - tmp32*tmp41 + tmp32*tmp44 + tmp38*tmp5 + pow(-tmp15 + tmp29*tmp39, 2))/sqrt(tmp19) + (-tmp31 - tmp33 - tmp35)*(tmp31 + tmp33 + tmp35)/pow(tmp19, 3.0/2.0);
  return r;
}

void dDdP(const Eigen::Matrix<double,9,1>& P, const Eigen::Matrix<double,2,1>& props, Eigen::Matrix<double,9,1>& dDdP_out) {
    dDdP_out(0) = dDdP_0(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(1) = dDdP_1(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(2) = dDdP_2(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(3) = dDdP_3(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(4) = dDdP_4(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(5) = dDdP_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(6) = dDdP_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(7) = dDdP_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    dDdP_out(8) = dDdP_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
}
void d2DdP2(const Eigen::Matrix<double,9,1>& P, const Eigen::Matrix<double,2,1>& props, Eigen::Matrix<double,9,9>& d2DdP2_out) {
    d2DdP2_out(0,0) = d2DdP2_0_0(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,1) = d2DdP2_0_1(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,2) = d2DdP2_0_2(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,3) = d2DdP2_0_3(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,4) = d2DdP2_0_4(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,5) = d2DdP2_0_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,6) = d2DdP2_0_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,7) = d2DdP2_0_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(0,8) = d2DdP2_0_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,0) = d2DdP2_out(0, 1);
    d2DdP2_out(1,1) = d2DdP2_1_1(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,2) = d2DdP2_1_2(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,3) = d2DdP2_1_3(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,4) = d2DdP2_1_4(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,5) = d2DdP2_1_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,6) = d2DdP2_1_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,7) = d2DdP2_1_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(1,8) = d2DdP2_1_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,0) = d2DdP2_out(0, 2);
    d2DdP2_out(2,1) = d2DdP2_out(1, 2);
    d2DdP2_out(2,2) = d2DdP2_2_2(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,3) = d2DdP2_2_3(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,4) = d2DdP2_2_4(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,5) = d2DdP2_2_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,6) = d2DdP2_2_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,7) = d2DdP2_2_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(2,8) = d2DdP2_2_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(3,0) = d2DdP2_out(0, 3);
    d2DdP2_out(3,1) = d2DdP2_out(1, 3);
    d2DdP2_out(3,2) = d2DdP2_out(2, 3);
    d2DdP2_out(3,3) = d2DdP2_3_3(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(3,4) = d2DdP2_3_4(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(3,5) = d2DdP2_3_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(3,6) = d2DdP2_3_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(3,7) = d2DdP2_3_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(3,8) = d2DdP2_3_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(4,0) = d2DdP2_out(0, 4);
    d2DdP2_out(4,1) = d2DdP2_out(1, 4);
    d2DdP2_out(4,2) = d2DdP2_out(2, 4);
    d2DdP2_out(4,3) = d2DdP2_out(3, 4);
    d2DdP2_out(4,4) = d2DdP2_4_4(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(4,5) = d2DdP2_4_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(4,6) = d2DdP2_4_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(4,7) = d2DdP2_4_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(4,8) = d2DdP2_4_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(5,0) = d2DdP2_out(0, 5);
    d2DdP2_out(5,1) = d2DdP2_out(1, 5);
    d2DdP2_out(5,2) = d2DdP2_out(2, 5);
    d2DdP2_out(5,3) = d2DdP2_out(3, 5);
    d2DdP2_out(5,4) = d2DdP2_out(4, 5);
    d2DdP2_out(5,5) = d2DdP2_5_5(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(5,6) = d2DdP2_5_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(5,7) = d2DdP2_5_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(5,8) = d2DdP2_5_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(6,0) = d2DdP2_out(0, 6);
    d2DdP2_out(6,1) = d2DdP2_out(1, 6);
    d2DdP2_out(6,2) = d2DdP2_out(2, 6);
    d2DdP2_out(6,3) = d2DdP2_out(3, 6);
    d2DdP2_out(6,4) = d2DdP2_out(4, 6);
    d2DdP2_out(6,5) = d2DdP2_out(5, 6);
    d2DdP2_out(6,6) = d2DdP2_6_6(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(6,7) = d2DdP2_6_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(6,8) = d2DdP2_6_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(7,0) = d2DdP2_out(0, 7);
    d2DdP2_out(7,1) = d2DdP2_out(1, 7);
    d2DdP2_out(7,2) = d2DdP2_out(2, 7);
    d2DdP2_out(7,3) = d2DdP2_out(3, 7);
    d2DdP2_out(7,4) = d2DdP2_out(4, 7);
    d2DdP2_out(7,5) = d2DdP2_out(5, 7);
    d2DdP2_out(7,6) = d2DdP2_out(6, 7);
    d2DdP2_out(7,7) = d2DdP2_7_7(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(7,8) = d2DdP2_7_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
    d2DdP2_out(8,0) = d2DdP2_out(0, 8);
    d2DdP2_out(8,1) = d2DdP2_out(1, 8);
    d2DdP2_out(8,2) = d2DdP2_out(2, 8);
    d2DdP2_out(8,3) = d2DdP2_out(3, 8);
    d2DdP2_out(8,4) = d2DdP2_out(4, 8);
    d2DdP2_out(8,5) = d2DdP2_out(5, 8);
    d2DdP2_out(8,6) = d2DdP2_out(6, 8);
    d2DdP2_out(8,7) = d2DdP2_out(7, 8);
    d2DdP2_out(8,8) = d2DdP2_8_8(P(0), P(1), P(2), P(3), P(4), P(5), P(6), P(7), P(8), props(0), props(1));
}

} /* namespace CodeGen_SphereCapsule */